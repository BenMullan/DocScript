<?xml version="1.0"?>
<doc>
<assembly>
<name>
DSCore
</name>
</assembly>
<members>
<member name="T:DocScript.Language.Expressions.IExpression">
	<summary>The Base Interface for all Expression Types (E.g. Implemented by LiteralExpr and VariableExpr)</summary>
</member><member name="T:DocScript.Language.Expressions.ICompoundExpression">
	<summary>The Base Interface for all Exprs that contain some form of child Exprs (E.g. Implemented by FunctionCallExpr and OperatorExpr, for their Arguments and Operands respectivley)</summary>
</member><member name="T:DocScript.Language.Expressions.LBLOperatorPlaceholder">
	<summary>The LBL Placeholder for an Operator Literal E.g. +</summary>
</member><member name="T:DocScript.Language.Expressions.LBLBracketedExprPlaceholder">
	<summary>The LBL Placeholder for the ChildExprs of a []-Bracketed Expr</summary>
</member><member name="T:DocScript.Language.Expressions.LBLFunctionCallPlaceholder">
	<summary>The LBL Placeholder for the ChildExpr of a FunctionCall</summary>
</member><member name="T:DocScript.Language.Expressions.LBLArgumentSeperatorPlaceholder">
	<summary>Represents a Comma (,) in a Linear Bracketed Level</summary>
</member><member name="T:DocScript.Language.Expressions.ScannedComponentIndicator">
	<summary>An object of this type is substituted into the LBL in CollapseToIOT_()</summary>
</member><member name="M:DocScript.Language.Expressions.LiteralExpr`1.ToString">
	<summary>Returns what the Expression would have looked like in the Source</summary>
</member><member name="M:DocScript.Language.Expressions.LiteralExpr`1.GetExprTreeNodeXML">
	<summary>Returns a serialised form of all the Data for the Expression, as needed to form a graphical Expression Tree</summary>
</member><member name="T:DocScript.Language.Expressions.LiteralExpr`1">
	<summary>Represents a DSString, DSNumber, or DSBoolean Literal</summary>
</member><member name="M:DocScript.Language.Expressions.VariableExpr.ToString">
	<summary>Returns what the Expression would have looked like in the Source</summary>
</member><member name="M:DocScript.Language.Expressions.VariableExpr.GetExprTreeNodeXML">
	<summary>Returns a serialised form of all the Data for the Expression, as needed to form a graphical Expression Tree</summary>
</member><member name="T:DocScript.Language.Expressions.VariableExpr">
	<summary>Represents an Expr which is the result of reading a Variable's value from a SymbolTable</summary>
</member><member name="F:DocScript.Language.Expressions.FunctionCallExpr.TargetFunction_Identifier">
	<summary>The Identifier of the target DSFunction or BIF</summary>
</member><member name="F:DocScript.Language.Expressions.FunctionCallExpr.Arguments_">
	<summary>The UNRESOLVED Arguments to apply to the Target Function at CallTime. SymbolTables are required to Resolve() these IExprs.</summary>
</member><member name="M:DocScript.Language.Expressions.FunctionCallExpr.#ctor(System.String,DocScript.Language.Expressions.IExpression[])">
	<summary>_Identifier is the Identifier of the target DSFunction or BIF</summary>
</member><member name="M:DocScript.Language.Expressions.FunctionCallExpr.ToString">
	<summary>Returns what the Expression would have looked like in the Source</summary>
</member><member name="M:DocScript.Language.Expressions.FunctionCallExpr.GetExprTreeNodeXML">
	<summary>Returns a serialised form of all the Data for the Expression, as needed to form a graphical Expression Tree</summary>
</member><member name="T:DocScript.Language.Expressions.FunctionCallExpr">
	<summary>Holds the Arguments and Identifier of a Function, ready for this to be called during Resolve()</summary>
</member><member name="M:DocScript.Language.Expressions.OperatorExpr.ToString">
	<summary>Returns what the Expression would have looked like in the Source</summary>
</member><member name="M:DocScript.Language.Expressions.OperatorExpr.GetExprTreeNodeXML">
	<summary>Returns a serialised form of all the Data for the Expression, as needed to form a graphical Expression Tree</summary>
</member><member name="T:DocScript.Language.Expressions.OperatorExpr">
	<summary>Holds the Operands and OperatorLiteral of a DSOperator</summary>
</member><member name="T:DocScript.Logging.LogEvent.DSEventSeverity">
	<summary>Error = The program could not continue. Warning = The program can continue partially. Infomation = Just an FYI. Verbose = Lots of data regarding the program's component-level processes. Debug = Annoyingly-frequent messages concerning each iteration of even the most insignificant loops. Debug messages are only processed when the Boolean Flag [ProcessDebugEvents] is True</summary>
</member><member name="T:DocScript.Logging.LogEvent.DSEventCatagory">
	<summary>Represents the Catagory, or stage in the Interpretation Process (Parsing, Lexing, or Execution) pertaining to which a LogEvent was generated.</summary>
</member><member name="M:DocScript.Logging.LogEvent.ToString">
	<summary>Returns a KVPSerialised String to represent the Data of the current Object</summary>
</member><member name="T:DocScript.Logging.LogEvent">
	<summary>Represents an Event which has occoured and is to be logged. An Object of this Class is passed to SubmitLogEvent() when it needs to be logged.</summary>
</member><member name="F:DocScript.Logging.LogUtilities.CurrentLogEventHandler">
	<summary>Points to a Method to run when a LogEvent is Submitted. Can be set to one of the BuiltInLogEventHandlers. Default: SilenceAll</summary>
</member><member name="T:DocScript.Logging.LogUtilities.LogEventHandler">
	<summary>The template for a Method to process a submitted LogEvent</summary>
</member><member name="F:DocScript.Logging.LogUtilities.ProcessDebugEvents">
	<summary>LogEvents where [Severity=Debug] are only processed when this flag is set to [True]. This is to improve performance, as there are a very large number of Debug Messages, and they are submitted at an annoyingly-high frequency.</summary>
</member><member name="M:DocScript.Logging.LogUtilities.SubmitLogEvent(System.String,DocScript.Logging.LogEvent.DSEventSeverity,DocScript.Logging.LogEvent.DSEventCatagory)">
	<summary>Invokes the CurrentLogEventHandler with the specified Data for the LogEvent. Also checks that the CurrentLogEventHandler has been initialised with a Delegate.</summary>
</member><member name="M:DocScript.Logging.LogUtilities.LogDebugMessage(System.String,DocScript.Logging.LogEvent.DSEventCatagory)">
	<summary>This is a QuickLog Method</summary>
</member><member name="M:DocScript.Logging.LogUtilities.LogParsingMessage(System.String,DocScript.Logging.LogEvent.DSEventSeverity)">
	<summary>This is a QuickLog Method</summary>
</member><member name="M:DocScript.Logging.LogUtilities.LogLexingMessage(System.String,DocScript.Logging.LogEvent.DSEventSeverity)">
	<summary>This is a QuickLog Method</summary>
</member><member name="M:DocScript.Logging.LogUtilities.LogExecutionMessage(System.String,DocScript.Logging.LogEvent.DSEventSeverity)">
	<summary>This is a QuickLog Method</summary>
</member><member name="M:DocScript.Logging.LogUtilities.LogSystemMessage(System.String,DocScript.Logging.LogEvent.DSEventSeverity)">
	<summary>This is a QuickLog Method</summary>
</member><member name="F:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.CLIDefault">
	<summary>Outputs the LogEvents to the Console in different Colours depending on the Event's Severity</summary>
</member><member name="F:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.CurrentGUIDefaultLogWindow">
	<summary>If this is [Nothing], then it's set to a New LogWindow. Otherwise, it can be a LogWIndow of your choice.</summary>
</member><member name="F:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.GUIDefault">
	<summary>Outputs the LogEvents to a Built-in LogWindow</summary>
</member><member name="F:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.MsgBoxPerEvent">
	<summary>Outputs each LogEvent to a MsgBox</summary>
</member><member name="P:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.TextFile(System.IO.FileInfo)">
	<summary>Outputs each LogEvent to the _LogFile</summary>
</member><member name="P:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.WindowsEventLog(System.String)">
	<summary>Writes each LogEvent to the Windows-Event-Log. The _Log_SubName should be e.g. "IDE", which would form the Log Name "DS_IDE"</summary>
</member><member name="F:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.SilenceAll">
	<summary>Does nothing with each LogEvent</summary>
</member><member name="T:DocScript.Logging.LogUtilities.BuiltInLogEventHandlers">
	<summary>Contains a series of pre-defined ways of handling a LogEvent</summary>
</member><member name="T:DocScript.Logging.LogUtilities.LogEventSubmissionResult">
	<summary>Holds Data concerning the success of submitting a LogEvent</summary>
</member><member name="P:DocScript.Language.Instructions.Statements.IfStatement.ElseContents">
	<summary>The Instructions which are executed if the ConditionExpr resolves to False. If there isn't an Else clause, this is [Nothing] (null)</summary>
</member><member name="P:DocScript.Language.Instructions.Statements.IfStatement.Contents">
	<summary>The Instructions which are executed if the ConditionExpr resolves to True</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.IfStatement.#ctor(DocScript.Language.Expressions.IExpression,System.Collections.Generic.List{DocScript.Language.Instructions.IInstruction},System.Collections.Generic.List{DocScript.Language.Instructions.IInstruction})">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.IfStatement.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.IfStatement.GetContentsAndElseContents_(DocScript.Runtime.Token[])">
	<summary>If there isn't an Else Clause in the Tokens, then [Item2] of the Tuple is Nothing (null)</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.IfStatement.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Any Expressions or Child Instructions executed hereby, are returned in the ExeRes's UpstairsExecutionResults member.</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.IfStatement.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.IfStatement.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.IfStatement.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.Statements.IfStatement">
	<summary>Represents E.g. [If (True) ... EndIf]</summary>
</member><member name="T:DocScript.Runtime.Constants">
	<summary>An Uninheritable, Uninstanciatable Class holding Runtime (Execution) Constants for DocScript</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.#ctor(DocScript.Runtime.SymbolTablesSnapshot,DocScript.Runtime.SymbolTable)">
	<summary>
 PUBLIC CONSTRUCTOR: Constructs the Snapshot with the specified SymTbls.
 The _BottomStack can contain 0 elements, but a _Topmost must be specified, which - in the case of the Program - will be the Global Symbol Table.
 Also ensures that no Identifier appears in multiple Symbol Tables.
 ----------------------------------------------------------------------------------------------------------
 If there are no downstairs SymbolTables, then use [SymbolTablesSnapshot].[Empty] for the _BottomStack Argument.
 This is the case in for the GlobalSymbolTable, as Generated by a [Program] Object.
 ----------------------------------------------------------------------------------------------------------
 </summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.#ctor(DocScript.Runtime.SymbolTable[])">
	<summary>PROTECTED CONSTRUCTOR: FromSymbolTablesArray</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.BottomStack">
	<summary>Returns all but the Topmost SymbolTable in the current SymTbls' Snapshot</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.Topmost">
	<summary>Returns only the Topmost SymbolTable in the current SymTbls' Snapshot</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.Bottommost">
	<summary>Returns or Sets the Bottommost SymbolTable in the current SymTbls' Snapshot</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.InnerSymbolTables_Count">
	<summary>Used by Execution Components, to report how many SymbolTables they have received</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.SymbolTables_ReadOnlyCopy">
	<summary>Used for external components who want to e.g. see which entries are visible in the current execution branch</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.AllEntriesInAllSymbolTables_ReadOnlyCopy">
	<summary>Used for external components who want to e.g. see which entries are visible in the current execution branch</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.AddEntryToToTopmost(System.String,DocScript.Runtime.SymbolTable.ISymbolTableEntry)">
	<summary>Mutates the state of the current Snapshot, to include an Entry for _Entry in the Topmost SymbolTable</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.GetEntryFromAny(System.String)">
	<summary>Returns the first Entry whose Identifier is _Identifier, from any of the SymbolTables in the Snapshot</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.UpdateEntryInAny(System.String,DocScript.Runtime.SymbolTable.ISymbolTableValue)">
	<summary>Updates the first entry whose Identifier is _Identifier, to have the value _NewValue. This method mutates the state of the current Snapshot.</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.IsContainedInAny(System.String)">
	<summary>Evaluates weather or not an Entry with _Identifier is contained in any of the SymbolTables in the current Snapshot</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.AlignsWith(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Evaluates weather or not each SymbolTable in _OtherSymTbls contains the same number of entries, and has the same identifiers and value types, as the SymbolTables in the current instance</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.EnsureObjectIsInValidState_">
	<summary>Ensures that no Identifier appears in multiple SymTbls</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.SnapshotFrom_ThisAndTopmost(DocScript.Runtime.SymbolTable)">
	<summary>Creates and Returns a New Snapshot with [Me] and [_NewTopMost]</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.ToString">
	<summary>Produces a DS-KVP Human-readable String for the SymTblSnpSht</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.ToXML">
	<summary>Produces an XML representation of all the SymbolTables in the Snapshot, with all their values and identifiers</summary>
</member><member name="M:DocScript.Runtime.SymbolTablesSnapshot.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the class from its XML representation</summary>
</member><member name="P:DocScript.Runtime.SymbolTablesSnapshot.Empty">
	<summary>Generates a New Empty SymTblsSnpSht</summary>
</member><member name="T:DocScript.Runtime.SymbolTablesSnapshot">
	<summary>Represents the State of one or more SymbolTables at a given point during the execution of a DocScript program</summary>
</member><member name="F:DocScript.Utilities.MicroHTTPServer.Port">
	<summary>The logical port on which the Web Server listens. E.g. "900" in the URL "http://localhost:900/Help/".</summary>
</member><member name="F:DocScript.Utilities.MicroHTTPServer.VirtualPath">
	<summary>The URL sub-path on which the Web Server listens. E.g. "Help" in the URL "http://localhost:900/Help/".</summary>
</member><member name="F:DocScript.Utilities.MicroHTTPServer.SuccessfullyHandledRequestsCount">
	<summary>The Number of requests responded-to by the Web Server instance so-far. This is NOT readonly, so that it can be externally reset.</summary>
</member><member name="E:DocScript.Utilities.MicroHTTPServer.RequestHandledSuccessfully">
	<summary>Occurs directly after a HTTP Request is responded-to. The Argument is the Request, whose full URL is avaliable via the Property .Url.ToString(). Also note the Properties of .UserAgent, .UserHostName, and .HttpMethod.</summary>
</member><member name="F:DocScript.Utilities.MicroHTTPServer.MIMETypesDictionary">
	<summary>A mapping of FILE-EXTENTIONS to MIME-TYPES. E.g. {"HTM", "text/html"}, {"BMP", "image/bmp"}. If a request's File Extension dosen't appear in the Dictionary's Keys, then the default of "text/plain" is used.</summary>
</member><member name="P:DocScript.Utilities.MicroHTTPServer.URL">
	<summary>E.g. Port=8090 and VirtualPath="Help" would make a URL of http://localhost:8090/Help/</summary>
</member><member name="M:DocScript.Utilities.MicroHTTPServer.#ctor(System.UInt16,System.String,System.String,System.String)">
	<summary>Mode 1: Constructs the MicroHTTPServer to serve a STRING. Example: Port=8090 and VirtualPath="Help" would make a URL of http://localhost:8090/Help/</summary>
</member><member name="M:DocScript.Utilities.MicroHTTPServer.#ctor(System.UInt16,System.IO.FileInfo,System.String)">
	<summary>Mode 2: Constructs the MicroHTTPServer to serve a SINGLE FILE. Uses the [MIMETypes] Dictionary to derive a MIME-Type from the _FileToServe's Extention. Example: Port=8090 and VirtualPath="Help" would make a URL of http://localhost:8090/Help/</summary>
</member><member name="M:DocScript.Utilities.MicroHTTPServer.#ctor(System.UInt16,System.IO.DirectoryInfo,System.String)">
	<summary>Mode 3: Constructs the MicroHTTPServer to serve FILES FROM A DIRECTORY. If the root URL / is requested, an Exception is Thrown. Uses the [MIMETypes] Dictionary to derive a MIME-Type from the File-to-serve's Extention. Example: Port=8090 and VirtualPath="Help" would make a URL of http://localhost:8090/Help/</summary>
</member><member name="M:DocScript.Utilities.MicroHTTPServer.Run">
	<summary>Initialises the HTTPListener and begins the request-handling loop. Each time a request is handled, the [RequestHandled] Event is raised.</summary>
</member><member name="T:DocScript.Utilities.MicroHTTPServer">
	<summary>
 A lightweight HTTP Server, which can serve either a constant String, single File, or a file from a specified Directory.
 
 	<example>
 		Dim _MicroServer As New MicroHTTPServer(_Port:=9020, _ResponseContentString:="Same for all URLs!", _ResponseMIMEType:="text/plain")
  	 	AddHandler _MicroServer.RequestHandledSuccessfully, Sub(_Request As System.Net.HttpListenerRequest) Console.Out.WriteLine(_Request.Url.ToString())
		 	_MicroServer.Run()
 	</example>
		<example>
 		Dim _MicroServer As New MicroHTTPServer(_Port:=9020, _DirectoryToServeFilesFrom:=New IO.DirectoryInfo("F:\"))
  	 	AddHandler _MicroServer.RequestHandledSuccessfully, Sub(_Request As System.Net.HttpListenerRequest) Console.Out.WriteLine(_Request.Url.ToString())
		 	_MicroServer.Run()
 	</example>
	</summary>
</member><member name="T:DocScript._DebugResources">
	<summary>Used for internal debugging purposes. No calls to members hereof should exist within ReleaseCandidate* builds.</summary>
</member><member name="T:DocScript.Language.Instructions.IInstruction">
	<summary>The Base Interface for all DocScript Instructions (E.g. Implemented by VariableDeclaration and ReturnToCaller)</summary>
</member><member name="M:DocScript.Language.Instructions.ExecutionResult.ReturnStatusData.ToString">
	<summary>
 Returns a (Non-Standard) KVP-Serialisation of the Object
 </summary>
</member><member name="T:DocScript.Language.Instructions.ExecutionResult.ReturnStatusData">
	<summary>Represents data about weather or not to Return to the Caller of a DSFunction, and weather or not there is an associated value for the Return for a DSFunction or a BuiltInFunction.</summary>
</member><member name="F:DocScript.Language.Instructions.ExecutionResult.ExecuteeDescription">
	<summary>E.g. "IInstr\IfStatement" or "BIF\Input". A Description of the Object being Executed.</summary>
</member><member name="F:DocScript.Language.Instructions.ExecutionResult.UpstairsExecutionResults">
	<summary>
 Item1 = ExeRes Description relative to current Execution (E.g. "Operand" or "Child Instruction");
 Item2 = The actual ExeRes which occured upstairs of the current Execution StackFrame.
 Holds ExecutionResults which occured upstairs of the current Execution - E.g. the Contents Instructions of a Statement, or the OperandResolutions of a OperatorExpr.
 </summary>
</member><member name="F:DocScript.Language.Instructions.ExecutionResult.Archived_SymbolTable">
	<summary>Used by IStatements to store an archived copy of their ScopedVars</summary>
</member><member name="M:DocScript.Language.Instructions.ExecutionResult.New_AndStartExecutionTimer(System.String)">
	<summary>
 How to use ExecutionResult:
 ---------------------------
 Dim _ExeRes As ExecutionResult = ExecutionResult.New_AndStartExecutionTimer("BIF\Output")
 (Do IInstruction processing...)
 Return _ExeRes.StopExecutionTimer_AndFinaliseObject(_ModifiedSymTbls)
 </summary>
</member><member name="M:DocScript.Language.Instructions.ExecutionResult.StopExecutionTimer_AndFinaliseObject(DocScript.Runtime.SymbolTablesSnapshot@)">
	<summary>The .ReturnStatus is initialised to New ReturnStatusData(); use an Inline With to set its members</summary>
	<param name="_ResultantSymbolTablesState">For IStatements, this should NOT contain the ScopedVariables member</param>
</member><member name="T:DocScript.Language.Instructions.ExecutionResult">
	<summary>Represents the result of a call to Execute() of an IInstruction, or Run() on a DSFunction. Contains data such as weather or not to Return.</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.LoopStatement.#ctor(DocScript.Language.Expressions.IExpression,System.Collections.Generic.List{DocScript.Language.Instructions.IInstruction})">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.LoopStatement.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.LoopStatement.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Any Expressions or Child Instructions executed hereby, are returned in the ExeRes's UpstairsExecutionResults member.</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.LoopStatement.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.LoopStatement.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.LoopStatement.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.Statements.LoopStatement">
	<summary>Represents E.g. [Loop (10) ... EndLoop]</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.DS">
	<summary>DocScript Language Utilities</summary>
</member><member name="M:DocScript.Runtime.BreakpointActionDialog.Show_AndReturnModifiedSymTbls(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Shows the Dialog, and returns only after one of the actions has been performed, or the dialog has been dismissed.</summary>
</member><member name="M:DocScript.Runtime.BreakpointActionDialog.BPAction_ViewSymTbls_">
	<summary>Sets the [SymbolTables_StateToReturn] member</summary>
</member><member name="M:DocScript.Runtime.BreakpointActionDialog.BPAction_CopyToDSLive_">
	<summary>Sets the [SymbolTables_StateToReturn] member</summary>
</member><member name="M:DocScript.Runtime.BreakpointActionDialog.BPAction_EditInDSLive_">
	<summary>Sets the [SymbolTables_StateToReturn] member</summary>
</member><member name="M:DocScript.Runtime.BreakpointActionDialog.BPAction_ContinueExec_">
	<summary>Sets the [SymbolTables_StateToReturn] member</summary>
</member><member name="T:DocScript.Runtime.BreakpointActionDialog">
	<summary>The Window shown when "Break()" is called from the DocScript Program.</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.Maths">
	<summary>Maths-related Functions such as Rounding, getting Pi, or finding the maximum of two numbers</summary>
</member><member name="T:DocScript.Runtime.StandardBuiltInFunctions">
	<summary>Provides useful Logic built-in to DocScript</summary>
</member><member name="P:DocScript.Utilities.SQLQueryRunner.QueryOutputDataTable">
	<summary>The Table filled with the resultant output of the previous SQL Query. If no queries have been made yet, then it is Nothing/null.</summary>
</member><member name="M:DocScript.Utilities.SQLQueryRunner.#ctor(System.String,System.String,System.String)">
	<summary>CONSTRUCTOR FOR SQL SERVER AUTHENTICATION. Readies the Object with the specified arguments, but does not initiate any form of connection with the SQL Server at this point.</summary>
</member><member name="M:DocScript.Utilities.SQLQueryRunner.#ctor(System.String)">
	<summary>CONSTRUCTOR FOR WINDOWS AUTHENTICATION. Readies the Object with the specified arguments, but does not initiate any form of connection with the SQL Server at this point.</summary>
</member><member name="P:DocScript.Utilities.SQLQueryRunner.ConnectionString">
	<summary>Constructs the ConnectionString based on the current values of Fields in the Class. E.g. there are different ConnectionString Formats for Windows Authentication vs SQL Server Authentication.</summary>
</member><member name="M:DocScript.Utilities.SQLQueryRunner.ExecuteQuery(System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Connects to the SQL Server, executes the T-SQL _Query, and returns the resultant DataTable.
 Example Call:
 _SQLQueryRunner.ExecuteQuery("SELECT * FROM [TestingDB].[dbo].[People] WHERE ""Name"" = @TargetName;", New SqlClient.SqlParameter() With {.ParameterName = "TargetName", .Value = "Ben", .DbType = DbType.String})
 </summary>
	<param name="_Query">The T-SQL Query to execute, e.g. "SELECT * FROM [DatabaseName].[dbo].[TableName];"</param>
	<param name="_SQLParameters">(Optional) An array of SQLParameters, which are added to the connection object prior to executing the SQLCommand. They can be referanced in the _Query in the form @ParameterName. Each Parameter ought to have a ParameterName, Value, and DbType</param>
	<returns>The DataTable filled with the output from the Command.</returns>
	<remarks>There is potential for a blank DataTable to be returned here.</remarks>
</member><member name="M:DocScript.Utilities.SQLQueryRunner.BeginQueryWatch(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Begins listening for a change in the Output of the specified _Query. When a change occurs, the QueryWatch_QueryOutputChanged Event is Raised.
 
 Example Call:
 Dim _SQLQueryRunner As New DocScript.Utilities.SQLQueryRunner(_SQLServerName:="MNLT01\SQLEXPRESS")
 _SQLQueryRunner.BeginQueryWatch(_DatabaseName:="QueryWatchTest", _Query:="SELECT ""Name"" FROM [dbo].[People];")
 AddHandler _SQLQueryRunner.QueryWatch_QueryOutputChanged, Sub(_EventArgs As SqlClient.SqlNotificationEventArgs) MsgBox("Type: " &amp; _EventArgs.Type.ToString())
 </summary>
	<param name="_DatabaseName">Needed because a Queue will be registered with the ServiceBroker of this Database. The specified Database MUST have its Service Broker ENABLED. To enable the Service Broker: ALTER DATABASE [DBName] SET ENABLE_BROKER;</param>
	<param name="_Query">E.g. SELECT "Name" FROM [dbo].[People];</param>
	<param name="_SQLParameters">Any Parameters to be used in the SQL Command, accessible from the _Query in the format @ParameterName</param>
	<remarks>
 Check Broker is enabled with "SELECT name, is_broker_enabled FROM sys.databases;"
 The database user must have the SUBSCRIBE QUERY NOTIFICATIONS permission
 
 _Query cannot contain *, and must use fully-qualified Tablenames instead of just the Table Name on its own.
 INVALID:	SELECT * FROM Messages;
 VALID:		SELECT ID, Message FROM dbo.Messages;
 </remarks>
</member><member name="T:DocScript.Utilities.SQLQueryRunner">
	<summary>Runs a Query on an SQL Server, returning the DataTable resulting from the Query</summary>
</member><member name="F:DocScript.Language.Expressions.Operators.OperatorUtilities.DSOperators">
	<summary>Maps the OperatorChars (as defined in the Language-level Constants) to their Binary- and Unary-Operator(s)</summary>
</member><member name="T:DocScript.Language.Expressions.Operators.OperatorUtilities">
	<summary>Contains the DSOperators Declaration, and several Utility Methods</summary>
</member><member name="M:DocScript.Language.Instructions.VariableDeclaration.#ctor(System.String,System.Type,DocScript.Language.Expressions.IExpression)">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.VariableDeclaration.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.VariableDeclaration.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Any Expressions or Child Instructions executed hereby, are returned in the ExeRes's UpstairsExecutionResults member.</summary>
</member><member name="M:DocScript.Language.Instructions.VariableDeclaration.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.VariableDeclaration.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.VariableDeclaration.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.VariableDeclaration">
	<summary>Represents E.g. [&lt;String&gt; Name : "Ben"]</summary>
</member><member name="M:DocScript.Logging.LogWindow.#ctor(System.String)">
	<summary>The _SessionName$ appears in the Window Title, to distinguish it from other active LogWindows</summary>
</member><member name="M:DocScript.Logging.LogWindow.AddLogEvent(DocScript.Logging.LogEvent)">
	<summary>Adds the _LogEvent to the DataGridView of the Form</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.Const">
	<summary>DocScript Constants - accessible via calling Const_Name()</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.File">
	<summary>File-related Functions for Reading from, and Writing to, Files on Disk.</summary>
</member><member name="T:DocScript.Runtime.SymbolTable.ISymbolTableValue">
	<summary>Implemented by: DSString, DSNumber, DSBoolean, DSArray(Of *), DSFunction, BuiltInFunction</summary>
</member><member name="T:DocScript.Runtime.SymbolTable.ISymbolTableEntry">
	<summary>Implemented by all derivatives of SymbolTableEntry(Of TValue), no matter what Type of Value they hold</summary>
</member><member name="T:DocScript.Runtime.SymbolTable.SymbolTableEntryFlags">
	<summary>To be BitWise Or-ed together if needed, though SymbolTableEntry(Of TValue).ToString() and ...ToXML() may not correctly read OR'd Bits</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.SymbolTableEntry`1.ToString">
	<summary>Returns a KVP String to represent the Object</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.SymbolTableEntry`1.Value_ToString">
	<summary>Returns the ToString() of the Value. Implemented in the Interface, so that a preview of the Value can be retreived, even when the Type of the Value is unknown.</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.SymbolTableEntry`1.SetFlags(DocScript.Runtime.SymbolTable.SymbolTableEntryFlags)">
	<summary>MAY ONLY BE CALLED ONCE (per instance). Sets the Flags of the SymbolTableEntry, without having to know what the TValue of the Entry is.</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.SymbolTableEntry`1.ToXML">
	<summary>Returns the Flags and the Value's XML</summary>
</member><member name="T:DocScript.Runtime.SymbolTable.SymbolTableEntry`1">
	<summary>Represents an Entry in a SymbolTable with a Value, FlagSet, and - implicitly - a Value Type.
 NOTE THAT THE IDENTIFIER FOR THE ENTRY IS STORED IN THE SYMBOLTABLE AS A DICTIONARY KEY (not in this class itself).</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.ConstructSymbolTableEntryFromXML(System.Xml.Linq.XElement)">
	<summary>Takes in XML with the TagName SymbolTableEntryValue, containing an ISymbolTableValue as an XML child. BIFs are read from the CLIDefault ExecutionContext, because the AllStandardBuiltInFunctions Property does not include the I/O Delegates.</summary>
</member><member name="P:DocScript.Runtime.SymbolTable.Entries_ReadOnlyCopy">
	<summary>Used for external components who want to e.g. see if the SymTbl Contains() a specified Key, or see how many Entries there are</summary>
</member><member name="P:DocScript.Runtime.SymbolTable.SnapshotContainingJustThis">
	<summary>Generates a new SymTblsSnpSht containing just the current SymbolTable (as the Topmost SymTbl)</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.AddEntry(System.String,DocScript.Runtime.SymbolTable.ISymbolTableEntry)">
	<summary>The _Identifier is ToUpper()-ed when added to the SymbolTable</summary>
</member><member name="P:DocScript.Runtime.SymbolTable.AlignsWith(DocScript.Runtime.SymbolTable)">
	<summary>There must contain the same number of Entries, and must have the same Identifiers and Value Types; only the Values can be different</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.ToString">
	<summary>Produces a DS-KVP Human-readable String for the Object</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.ToXML">
	<summary>Produces an XML representation for the Object</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the class from its XML representation</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.ExtractVariableValue_FromSymbolTableEntry(DocScript.Runtime.SymbolTable.ISymbolTableEntry,System.String)">
	<summary>Returns the IDataValue-based Variable Value from inside the SymbolTableEntry</summary>
</member><member name="M:DocScript.Runtime.SymbolTable.GetSymbolTableEntry_FromIDataValue(DocScript.Language.Variables.IDataValue,System.Type)">
	<summary>
 Generates a SymbolTableEntry(Of TheIDVsType) from the _InputIDV
 NOTE: If [_InputIDV Is Nothing], Then the relevant InstanceWithNullValue is used, depending on the GetType() of the _InputIDV
 </summary>
	<param name="_NullValueType_IfInputIDVIsNothing">
 If the _InputIDV Is Nothing, then we can't tell what type it is, so we wouldn't know which InstanceWithNullValue to use.
 Therefore, we'll have to take in a _NullValueType_IfInputIDVIsNothing to use instead
 This argument can be [Nothing], if you're audaciously sure that the _InputIDV isn't [Nothing]
 </param>
</member><member name="P:DocScript.Runtime.SymbolTable.IDVNullValue_SymbolTableEntry_ForIDVType(System.Type)">
	<summary>
 Gets a SymbolTableEntry(Of _IDVType) with the InstanceWithNullValue for the correct IDV Type, via an exhaustive [Select Case]
 </summary>
</member><member name="T:DocScript.Runtime.SymbolTable">
	<summary>Holds a dictionary of Identifiers to [SymbolTableEntry]s. All Identifiers are ToUpper()-ed.</summary>
</member><member name="F:DocScript.Language.Instructions.ReturnToCaller.ReturnValueExpr">
	<summary>If there wasn't an associated Expr in the source, then this is Nothing (null)</summary>
</member><member name="M:DocScript.Language.Instructions.ReturnToCaller.#ctor(DocScript.Language.Expressions.IExpression)">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.ReturnToCaller.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.ReturnToCaller.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Any Expressions or Child Instructions executed hereby, are returned in the ExeRes's UpstairsExecutionResults member.</summary>
</member><member name="M:DocScript.Language.Instructions.ReturnToCaller.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.ReturnToCaller.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.ReturnToCaller.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.ReturnToCaller">
	<summary>Represents E.g. [Return "Ben"]</summary>
</member><member name="M:DocScript.Exceptions.DSException.#ctor(System.String)">
	<summary>Attempts to Log the Exception Message, indicating weather this occoured successfully or not in the Message Property</summary>
</member><member name="M:DocScript.Exceptions.DSException.#ctor(System.String,System.Exception)">
	<summary>Attempts to Log the Exception Message, indicating weather this occoured successfully or not in the Message Property</summary>
</member><member name="M:DocScript.Exceptions.DSException.FormatMessage(System.String)">
	<summary>Inserts a LineBreak after each Colon (:), if this hasn't already been done.</summary>
</member><member name="T:DocScript.Exceptions.DSException">
	<summary>The Base Execption Class whence all other DocScript Exceptions derive.</summary>
</member><member name="M:DocScript.Exceptions.DSValidationException.#ctor(System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSValidationException">
	<summary>Used for Input and Argument Validation</summary>
</member><member name="M:DocScript.Exceptions.DSTokenValidationException.#ctor(System.String,DocScript.Runtime.Token[])">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSTokenValidationException">
	<summary>Used for Token Validation</summary>
</member><member name="M:DocScript.Exceptions.DSNullException.#ctor(System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSNullException">
	<summary>Used for Null Referances and other Objects with should be set to a non-null value (but aren't)</summary>
</member><member name="M:DocScript.Exceptions.DSInvalidCallException.#ctor(System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSInvalidCallException">
	<summary>Used when an call is made to a method that should never be called (e.g. one implemented from an interface that isn't needed on the implementer object)</summary>
</member><member name="M:DocScript.Exceptions.DSLBLValidationException.#ctor(System.String,System.String,DocScript.Language.Expressions.IExpression[])">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSLBLValidationException">
	<summary>Used when the order of the LBL is invalid in an Expression</summary>
</member><member name="M:DocScript.Exceptions.DSOperatorExecutionException.#ctor(System.String,System.String[],System.Exception)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSOperatorExecutionException">
	<summary>Used when an OperatorExpr.Resolve() call Throws an Exception</summary>
</member><member name="M:DocScript.Exceptions.DSBuiltInFunctionException.#ctor(System.String,System.Exception)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSBuiltInFunctionException">
	<summary>Used when the [Action] of a BuiltInFunction Throws an Exception</summary>
</member><member name="M:DocScript.Exceptions.DSUnexpectedTokenException.#ctor(System.String,DocScript.Runtime.Token)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="M:DocScript.Exceptions.DSUnexpectedTokenException.#ctor(System.String,DocScript.Runtime.Token[])">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSUnexpectedTokenException">
	<summary>Used when a Token (or several Tokens) appears in an unexpected place in the source</summary>
</member><member name="M:DocScript.Exceptions.DSMissingTokenException.#ctor(System.String,DocScript.Runtime.Token)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSMissingTokenException">
	<summary>Used when a Token appears in an unexpected place in the source</summary>
</member><member name="M:DocScript.Exceptions.DSTokenPatternValidationException.#ctor(System.String,DocScript.Runtime.TokenPatternValidation.TokensToPatternsValidator,DocScript.Runtime.Token[])">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSTokenPatternValidationException">
	<summary>Used when a Token Array does not satisfy an Array of [TokenPattern]s</summary>
</member><member name="M:DocScript.Exceptions.DSNonexistentSymbolException.#ctor(System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSNonexistentSymbolException">
	<summary>Used when an Entry with the specified Identifier does not exist in a SymbolTable</summary>
</member><member name="M:DocScript.Exceptions.DSDuplicateSymbolException.#ctor(System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSDuplicateSymbolException">
	<summary>Used when an Entry with the specified Identifier already exists in a SymbolTable</summary>
</member><member name="M:DocScript.Exceptions.DSIncorrectSymbolTableEntryTypeException.#ctor(System.String,System.String,System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSIncorrectSymbolTableEntryTypeException">
	<summary>Used when an Entry with the specified Identifier does not exist in a SymbolTable</summary>
</member><member name="M:DocScript.Exceptions.DSRefusedToCoerceToTypeException.#ctor(DocScript.Language.Variables.IDataValue,System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSRefusedToCoerceToTypeException">
	<summary>Used for DS-TC, when an Input IDV cannot reasonably produce an Output IDV of a given IDV-Type</summary>
</member><member name="M:DocScript.Exceptions.DSNoReturnValueException.#ctor(System.String,System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSNoReturnValueException">
	<summary>Used when a Function declares itself to return a value, but dosen't.</summary>
</member><member name="M:DocScript.Exceptions.DSSourceGeneratedException.#ctor(System.String)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSSourceGeneratedException">
	<summary>Used when the DS_ThrowError(_Msg) BuiltInFunction is called from within DocScript Source</summary>
</member><member name="M:DocScript.Exceptions.DSWebException.#ctor(System.String,System.Exception)">
	<summary>Constructs a New DocScript WebException Object, attempting to Log the Message</summary>
	<param name="_SourceLocationMessage">E.g. @ExprTreeFromSourceExpr</param>
</member><member name="T:DocScript.Exceptions.DSWebException">
	<summary>Used when an API Logical Branch encounters an Exception which must be caught by an unstream Catch Statement. DOES NOT INHERIT FROM DSException.</summary>
</member><member name="M:DocScript.Exceptions.DSInputRequestTimedOutException.#ctor(System.TimeSpan)">
	<summary>Calls the Constructor for DSException which attempts to Log the Message</summary>
</member><member name="T:DocScript.Exceptions.DSInputRequestTimedOutException">
	<summary>Used when an Input-Response is not provided within 8 Mins of it being requested by the ESWorker</summary>
</member><member name="T:DocScript.Exceptions.DSCLANotSpecifiedException">
	<summary>Thrown when a Command-Line Argument is mandatory, but not specified. Does NOT Inherit DSException.</summary>
</member><member name="T:DocScript.Exceptions.DSCLAValueNotSpecifiedException">
	<summary>Thrown when a Command-Line Argument is specified, but without a mandatory associated Value in the form /Key:Value or /Key:"Value". Does NOT Inherit DSException.</summary>
</member><member name="F:DocScript.Language.Variables.BasedNumberSupport.BasedNumber.NullGrapheme">
	<summary>Used when there is no Grapheme avaliable for a specified GraphemeIndex</summary>
</member><member name="P:DocScript.Language.Variables.BasedNumberSupport.BasedNumber.GraphemeSet">
	<summary>The characters used to represent the Base Number. Starting 0123456789 and then ABCDEF...</summary>
</member><member name="M:DocScript.Language.Variables.BasedNumberSupport.BasedNumber.#ctor(System.String,System.Byte)">
	<summary>The _Value must use Graphemes from the BasedNumber.Graphemes Property</summary>
</member><member name="M:DocScript.Language.Variables.BasedNumberSupport.BasedNumber.ToBase(System.Byte)">
	<summary>Returns the current BasedNumber as a New BasedNumber, converting it to the _TargetBase</summary>
	<param name="_TargetBase">The Base for the New BasedNumber</param>
</member><member name="M:DocScript.Language.Variables.BasedNumberSupport.BasedNumber.ProduceBasedNumberRepresentation_FromGraphemeCodes_(System.Int32[])">
	<summary>E.g. takes in {0, 10, 8, 1666} and returns "A80#"</summary>
</member><member name="P:DocScript.Language.Variables.BasedNumberSupport.BasedNumber.AsBase10">
	<summary>Computes the Base-10 Representation of the Number, then Parses this as an Int64, and Reutrns it.</summary>
</member><member name="M:DocScript.Language.Variables.BasedNumberSupport.BasedNumber.ToString">
	<summary>Returns a KVP-Serialised representation of the BasedNumber</summary>
</member><member name="T:DocScript.Language.Variables.BasedNumberSupport.BasedNumber">
	<summary>Represents a numerical magnitude with a Base and a Value, providing easy support for converting between bases (in the PlaceValue (Positional-Notation) System)</summary>
</member><member name="T:DocScript.Language.Variables.BasedNumberSupport">
	<summary>Implements support for Based Numbers in DocScript</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.System">
	<summary>System-related Functions such as getting the current Time or executing a Shell Command</summary>
</member><member name="M:DocScript.Utilities.CLAManager.CLADatum.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Action{System.String})">
	<summary>
 Constructs a new Object to represent the desired configuration for a single CLA Key (Specified in the Syntax /Key or /Key:Value or /Key:"Value")
 </summary>
	<param name="_Key">The CLA Key E.g. "ShowLog". The forward slash / is not to be included in this string. NOTE: CLA Keys are not case-sensitive; /Name is the same as /NAmE</param>
	<param name="_Description">The Description used in the CLA Help Dictionary ( /? )</param>
	<param name="_MustBeSpecified">Indicates that the Key must be specified in the Command-Line Arguments provided to the CLAManager, otherwise an Exception is Thrown.</param>
	<param name="_MustHaveValue">Indicates that if the Key is specified, then a corrosponding Value must also be specified, otherwise an Exception is Thrown.</param>
	<param name="_ActionIfSpecified">The Action to run if the Key is specified. The String Argument is the Value corrosponding to the Key, which could be [Nothing] (null) {nullptr} &lt;undefined&gt; if there is no Value corrosponding to the Key</param>
	<remarks></remarks>
</member><member name="T:DocScript.Utilities.CLAManager.CLADatum">
	<summary>
 Represents a configuration for a single CLA key, and what to do if it's specified.
 (Specified in the Syntax /Key or /Key:Value or /Key:"Value")
 NOTE: CLA Keys are not case-sensitive; /Name is the same as /NAmE
 </summary>
	<remarks></remarks>
</member><member name="F:DocScript.Utilities.CLAManager.UseCommandLineFormatting_ForHelpDictionary">
	<summary>
 Indicates that the Help Dictionary will have the Linebreaks and padding-whitespace automatically inserted.
 Use True, if this is a Console Application;
 If MsgBox()-ing out the /? Dictionary, then use False.
 </summary>
</member><member name="F:DocScript.Utilities.CLAManager.HelpDictionaryWasDisplayed">
	<summary>Indicates weather /? was handled instead of processing CLAData. If the Help Dictionary is displayed, then no other CLA Actions will be dealt with or run, and HelpDictionaryWasDisplayed will be set to True.</summary>
</member><member name="M:DocScript.Utilities.CLAManager.#ctor(System.String[],System.String,System.String[],System.Action{System.String},System.Boolean,DocScript.Utilities.CLAManager.CLADatum[])">
	<summary>
		<para>Constructs a Command-Line Argument Manager. All managment of the CLAs occours as soon as the object is constructed. No additional call is nessecary.</para>
		<para>
 Exmaple Call:

 Dim _CLAManager As New DocScript.Utilities.CLAManager(
     _CLAs,
     "DocScript Command-Line Interpreter. Interprets DocScript Source Files.",
     {"DSCLI.EXE /Live",
     "DSCLI.EXE /Live /LogToFile:""DSLive.DSLog"" /ProcessDebugEvents /GUI",
     "DSCLI.EXE /Run /SourceString:""Function &lt;Void&gt; Main ();Output(`Hello, World!`);EndFunction""",
     "DSCLI.EXE /Run /SourceFile:""X:\Programming\DocScript\HelloWorld.DS"" /LogToConsole",
     "DSCLI.EXE /GetProgramTree /SourceString:""Function &lt;Void&gt; Main ();Output(`Hello, World!`);EndFunction""",
     "DSCLI.EXE /Run /SourceString:""Function&lt;Void&gt;Main();System_Beep();EndFunction""",
     "DSCLI.EXE /Run /SourceFile:""BIO2017.DS"" /DocScriptCLAs:""GRBBRB"" /LogToFile:BIO.DSLog"},
     AddressOf Console.WriteLine, True,
     New Utilities.CLAManager.CLADatum("Live", "[Action] Enters a DocScript Live Session: a DS&gt; prompt appears and accepts Statement-level Instructions", False, False, Sub(_Value$) ActionWhenReady = WhenReadyAction.EnterDSLiveSession),
     New Utilities.CLAManager.CLADatum("Run", "[Action] Interprets the DocScript Source (specified by either /SourceFile or /SourceString). This process then returns the ExitCode of the DocScript Program.", False, False, Sub(_Value$) ActionWhenReady = WhenReadyAction.Run),
     New Utilities.CLAManager.CLADatum("GetProgramTree", "[Action] Parses and Lexes the DocScript Source (specified by either /SourceFile or /SourceString), and writes the resultant XML Program tree to the Console Output Stream", False, False, Sub(_Value$) ActionWhenReady = WhenReadyAction.GetProgramTree),
     New Utilities.CLAManager.CLADatum("SourceFile", "[Datum] Specifies the Source via a DocScript Source File", False, True, Sub(_Value$) SourceToInterpret = My.Computer.FileSystem.ReadAllText(_Value)),
     New Utilities.CLAManager.CLADatum("SourceString", "[Datum] Specifies the Source via a DocScript Source String. Use ; for NewLine and ` for StringLiteralStartEndChar.", False, True, Sub(_Value$) SourceToInterpret = _Value.Replace(";", vbCrLf).Replace("`"c, """"c)),
     New Utilities.CLAManager.CLADatum("DocScriptCLAs", "[Datum] Specifies Command-Line Arguments for the DocScript Program", False, True, Sub(_Value$) DocScriptCLAs = _Value.Split(" "c))
 )
 
 </para>
		<para>If the Help Dictionary is displayed, then no other CLA Actions will be dealt with or run, and HelpDictionaryWasDisplayed will be set to True.</para>
		<para>NOTE: CLA Keys are not case-sensitive; /Name is the same as /NAmE</para>
	</summary>
	<param name="_CLAs">The Command-Line Arguments to deal with E.g. My.Application.CommandLineArgs.ToArray() or an "args" Parameter</param>
	<param name="_CLAData">A collection of CLADatum Instances (#KnowYourLatin)</param>
	<param name="_CLAHelpDictionary_Description">The Text displayed at the start of the CLA Help Dictionary, when it is displayed via the presence of the /? CLA</param>
	<param name="_CLAHelpDictionary_Examples">Example Calls to the Binary executable with CLAs. E.g. DSCLI.EXE /RunSourceFile:"X:\Programming\DocScript\HelloWorld.DS"</param>
	<param name="_OutputDelegate">Used for E.g. outputting the CLA Help Dictionary if the /? CLA is specified</param>
	<remarks></remarks>
</member><member name="T:DocScript.Utilities.CLAManager">
	<summary>
 Manages a set of CLAData to act on any specified Command-Line Arguments, and to display a CLA Help Dictionary if the argument /? is specified.
 Runs the relevant CLADatums' Actions-If-Specified, as soon as the CLAManager is constructed.
 </summary>
</member><member name="M:DocScript.Language.Variables.TypeCoercion.CoerceIDV_IntoTargetIDVType``1(DocScript.Language.Variables.IDataValue)">
	<summary>Use via the Coerce() Compiler Extention.</summary>
	<typeparam name="_TSoughtIDV">The DataType that you want to coerce the _InputIDV into</typeparam>
	<remarks>DO NOT RENAME THIS FUNCTION; ITS NAME IS HARD_CODED AS A STRING LITERAL IN THE REFLECTION CALL ABOVE</remarks>
</member><member name="T:DocScript.Language.Variables.TypeCoercion">
	<summary>DS-TC</summary>
</member><member name="M:DocScript.Runtime.Parser.GetTokensFromSource(System.String)">
	<summary>Performs the Segmentation and TokenTypeIdentification to generate Tokens from some raw DocScript Source</summary>
</member><member name="P:DocScript.Runtime.Parser.AllLineBreaksAreValid_(System.String)">
	<summary>This function attempts to proove that only Proper CrLf LineBreaks have been used</summary>
</member><member name="M:DocScript.Runtime.Parser.BlankOutUnnecessarySourceLines_(System.String[]@)">
	<summary>Replaces [#Comment Lines] and [Whitespace-only Lines] with [Empty Strings]</summary>
</member><member name="M:DocScript.Runtime.Parser.ReplaceStringLiteralsWithSLITs_(System.String[]@)">
	<summary>Replaces any StringLiterals with SLITs. The Origional String Literals are stored in the Array returned by this Method</summary>
	<returns>Returns the SLITs Array</returns>
</member><member name="M:DocScript.Runtime.Parser.SegmentCleanSourceIntoTokens_(System.String[],System.String[])">
	<summary>Splits the _CleanSourceLines up into Tokens, each of which leave this Function with an "Unresolved" TokenType</summary>
</member><member name="M:DocScript.Runtime.Parser.RemoveProblematicChars_(System.Collections.Generic.List{DocScript.Runtime.Token}@)">
	<summary>
 Takes in Tokens which may contain Problematic chars in their values, and removes these chars.
 Then, removes any tokens which are part of newly-visable #Comment lines (which were previously undetected, because of a leading problematic-char).
 Then, ensures that all remaining characters in all Tokens' Values are valid.
 </summary>
</member><member name="M:DocScript.Runtime.Parser.ReplaceSLITsWithStringLiterals_(System.Collections.Generic.List{DocScript.Runtime.Token}@,System.String[])">
	<summary>Takes in some Tokens which may have SLITs in them, and returns a version of that List(Of Token) which has the origional StringLiterals again</summary>
</member><member name="M:DocScript.Runtime.Parser.GetTypedTokensFromUnclassifiedOnes_(System.Collections.Generic.List{DocScript.Runtime.Token}@)">
	<summary>Takes in the Tokens where [Type = Unresolved] and classifies the Tokens with the RegExpToTokenType_Table</summary>
</member><member name="M:DocScript.Runtime.Parser.EnsurePairedComponentsAreWellBalenced_(DocScript.Runtime.Token[]@)">
	<summary>Ensures that all brackets () [] and &lt;&gt;, and statements (Function, If, Etc...) and are well-balenced</summary>
</member><member name="M:DocScript.Runtime.Parser.FlattenSource(System.String)">
	<summary>
 Makes the source valid for within a single line or inside string literal; replaces [LineBreaks (CrLf)] with [;], and replaces ["] with [`].
 </summary>
</member><member name="M:DocScript.Runtime.Parser.UnflattenSource(System.String)">
	<summary>
 Takes in flattened source, and expands it; replaces [;] with [LineBreaks (CrLf)], and replaces [`] with ["].
 For example, DocScript-Live uses this method, so the line [Output("Ben");Output("Ryan")] becomes two seperate lines.
 </summary>
</member><member name="M:DocScript.Runtime.Parser.GetTokensXML(DocScript.Runtime.Token[]@)">
	<summary>Returns the standardised Tokens' XML for an array of Tokens output from the Parser. Used for DS-Pipelining.</summary>
</member><member name="T:DocScript.Runtime.Parser">
	<summary>Contains Constants and Methods for the first stage in the DocScript Interpretation Process</summary>
</member><member name="M:DocScript.Language.Instructions.FunctionCall.#ctor(System.String,DocScript.Language.Expressions.IExpression[])">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.FunctionCall.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.FunctionCall.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Any Expressions or Child Instructions executed hereby, are returned in the ExeRes's UpstairsExecutionResults member.</summary>
</member><member name="M:DocScript.Language.Instructions.FunctionCall.CallFunctionByName(DocScript.Runtime.SymbolTablesSnapshot,System.String,DocScript.Language.Expressions.IExpression[],System.Boolean)">
	<summary>Used by FunctionCall and FunctionCallExpr to call a BIF or DSFunction contained in the _InputSymbolTables. Arguments are passed in as UNRESOLVED Expressions.</summary>
	<remarks>Sounds rather Win32-y, dosen't it?</remarks>
</member><member name="M:DocScript.Language.Instructions.FunctionCall.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.FunctionCall.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.FunctionCall.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.FunctionCall">
	<summary>Represents E.g. [GetAge("Ben", 2)]</summary>
</member><member name="P:DocScript.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:DocScript.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:DocScript.My.Resources.Resources.BreakPoint">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:DocScript.My.Resources.Resources.ContinueExec">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:DocScript.My.Resources.Resources.Delete">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:DocScript.My.Resources.Resources.DSLive">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:DocScript.My.Resources.Resources.SymbolTables">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:DocScript.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:DocScript.Runtime.TokenPatternValidation.TokenPattern.ToString">
	<summary>Returns in the form E.g. [Keyword, /Function/]</summary>
</member><member name="T:DocScript.Runtime.TokenPatternValidation.TokenPattern">
	<summary>Represents a Pattern against which a single Token is validated</summary>
</member><member name="M:DocScript.Runtime.TokenPatternValidation.TokensToPatternsValidator.EnsureIsSatisfiedBy(DocScript.Runtime.Token[],System.Boolean)">
	<summary>Throws any Exceptions to provide verbose output if a Token Array does not satisfy the Patterns</summary>
</member><member name="M:DocScript.Runtime.TokenPatternValidation.TokensToPatternsValidator.IsSatisfiedBy(DocScript.Runtime.Token[],System.Boolean)">
	<summary>Returns True if the Tokens match the Patterns in the current TPV</summary>
</member><member name="M:DocScript.Runtime.TokenPatternValidation.TokensToPatternsValidator.IsSatisfiedBy(DocScript.Runtime.Token)">
	<summary>Returns True if the Token matches the Patterns in the current TPV</summary>
</member><member name="M:DocScript.Runtime.TokenPatternValidation.TokensToPatternsValidator.ToString">
	<summary>Returns the TokenValidators herein</summary>
</member><member name="T:DocScript.Runtime.TokenPatternValidation.TokensToPatternsValidator">
	<summary>Represents a List of [TokenPattern]s against which an Array of Tokens can be validated</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.MinimumRequiredTokens">
	<summary>A Map of IInstruction to the Minimum No. Tokens required to construct one of those Instructions</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.LineEnd_TPV">
	<summary>Validates [{Cr,Lf}]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.OpeningDataTypeBracket_TPV">
	<summary>Validates [&lt;]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.AssignmentOperator_TPV">
	<summary>Validates [:]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.OpeningFunctionBracket_TPV">
	<summary>Validates [(]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.ClosingFunctionBracket_TPV">
	<summary>Validates [)]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.FunctionArgumentSeperator_Comma_TPV">
	<summary>Validates [,]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Keyword_Function_TPV">
	<summary>Validates [Function]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.StatementEnd_Function_TPV">
	<summary>Validates [EndFunction]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Keyword_If_TPV">
	<summary>Validates [If]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Keyword_Else_TPV">
	<summary>Validates [Else]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.StatementEnd_If_TPV">
	<summary>Validates [EndIf]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Keyword_Loop_TPV">
	<summary>Validates [Loop]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.StatementEnd_Loop_TPV">
	<summary>Validates [EndLoop]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Keyword_While_TPV">
	<summary>Validates [While]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.StatementEnd_While_TPV">
	<summary>Validates [EndWhile]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.StatementOpening_TPV">
	<summary>Validates [Function], [If], [Loop], and [While]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.StatementClosing_TPV">
	<summary>Validates [EndFunction], [EndIf], [EndLoop], and [EndWhile]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.SubStatementOpening_TPV">
	<summary>Validates [If], [Loop], and [While]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.SubStatementClosing_TPV">
	<summary>Validates [EndIf], [EndLoop], and [EndWhile]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Statement_FirstLineEnding_TPV">
	<summary>Validates [) {LineEnd}]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.DSFunction_UpToIncIdentifier_TPV">
	<summary>Validates E.g. [Function &lt;String&gt; GetName]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Parameterless_DSFunction_TPV">
	<summary>Validates E.g. [Function &lt;String&gt; GetName () {LineEnd}]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Parameter_TPV">
	<summary>Validates E.g. [&lt;String@&gt; Names]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.IfStatement_UpToIncOpenBracket_TPV">
	<summary>Validates [If (]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.WhileStatement_UpToIncOpenBracket_TPV">
	<summary>Validates [While (]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.LoopStatement_UpToIncOpenBracket_TPV">
	<summary>Validates [Loop (]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.VariableDeclaration_UpToIncIdentifier_TPV">
	<summary>Validates E.g. [&lt;String@&gt; NameTwo]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.FunctionCall_UpToIncOpenBracket_TPV">
	<summary>Validates E.g. [GetName(]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.Keyword_Return_TPV">
	<summary>Validates [Return]</summary>
</member><member name="F:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs.VariableAssignmet_TPV">
	<summary>Validates E.g. [Name :]</summary>
</member><member name="T:DocScript.Runtime.TokenPatternValidation.BuiltInTPVs">
	<summary>IInstruction Tokens to Patterns Validators (TPVs)</summary>
</member><member name="T:DocScript.Runtime.TokenPatternValidation">
	<summary>Contains logic for validating a list of Tokens against a Pattern</summary>
</member><member name="M:DocScript.Utilities.KVPSerialisation.GetKVPString(System.String[][])">
	<summary>Returns a Serialised String form of the Object's Key-Value Pairs specified</summary>
</member><member name="M:DocScript.Utilities.KVPSerialisation.GetKVPXML(System.String,System.String[][])">
	<summary>Returns a Serialised XML form of the Object's Key-Value Pairs specified</summary>
</member><member name="M:DocScript.Utilities.KVPSerialisation.GetKVPXML``1(System.String[][])">
	<summary>Returns a Serialised XML form of the Object's Key-Value Pairs specified</summary>
</member><member name="T:DocScript.Utilities.KVPSerialisation">
	<summary>
 Provides methods for Key-Value Pair Serialisation
 </summary>
</member><member name="M:DocScript.Language.Instructions.VariableAssignment.#ctor(System.String,DocScript.Language.Expressions.IExpression)">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.VariableAssignment.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.VariableAssignment.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Any Expressions or Child Instructions executed hereby, are returned in the ExeRes's UpstairsExecutionResults member.</summary>
</member><member name="M:DocScript.Language.Instructions.VariableAssignment.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.VariableAssignment.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.VariableAssignment.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.VariableAssignment">
	<summary>Represents E.g. [Name : "Ben"]</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.WhileStatement.#ctor(DocScript.Language.Expressions.IExpression,System.Collections.Generic.List{DocScript.Language.Instructions.IInstruction})">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.WhileStatement.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.WhileStatement.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>Any Expressions or Child Instructions executed hereby, are returned in the ExeRes's UpstairsExecutionResults member.</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.WhileStatement.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.WhileStatement.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.WhileStatement.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.Statements.WhileStatement">
	<summary>Represents E.g. [While (True) ... EndWhile]</summary>
</member><member name="T:DocScript.Language.Variables.IDataValue">
	<summary>The Non-Generic Interface for all actual Values of an Expr or Variable</summary>
</member><member name="T:DocScript.Language.Variables.IDataValue`1">
	<summary>The Generic Interface for values of an Expr or Variable. Takes in the DotNetType for which the interface is a wrapper</summary>
</member><member name="M:DocScript.Language.Variables.DSBoolean.ToString">
	<summary>Returns a string to represent the Literal for the IDataValue</summary>
</member><member name="M:DocScript.Language.Variables.DSBoolean.ToXML">
	<summary>Returns the Value of the current ISymbolTableValue inside a TagName of the Type</summary>
</member><member name="T:DocScript.Language.Variables.DSBoolean">
	<summary>Represents a True or False value</summary>
</member><member name="P:DocScript.Language.Variables.DSNumber.Value">
	<summary>The Base-10 Value of the Number</summary>
</member><member name="P:DocScript.Language.Variables.DSNumber.IsValidNumericLiteralString(System.String)">
	<summary>
 Used in DS-TC for String→Number Conversion
 NOTE: This function will automatically strip the Input String of Quotes on either side, if it has them.
 </summary>
</member><member name="M:DocScript.Language.Variables.DSNumber.FromNumericLiteralString(System.String)">
	<summary>
 Used in DS-TC for String→Number Conversion
 NOTE: This function will automatically strip the Input String of Quotes on either side, if it has them.
 </summary>
</member><member name="M:DocScript.Language.Variables.DSNumber.StripQuotesIfPresent(System.String)">
	<summary>
 Automatically strips the Input String of Quotes on either side if it has them both, and if the Input String is *at-least* 3 chars long.
 </summary>
</member><member name="M:DocScript.Language.Variables.DSNumber.ToString">
	<summary>Returns a string to represent the Literal for the IDataValue</summary>
</member><member name="M:DocScript.Language.Variables.DSNumber.ToXML">
	<summary>Returns the Value of the current ISymbolTableValue inside a TagName of the Type</summary>
</member><member name="T:DocScript.Language.Variables.DSNumber">
	<summary>Represents a Number with a Value and a Base. Can be from three different forms of Literal</summary>
</member><member name="M:DocScript.Language.Variables.DSString.#ctor(System.String)">
	<summary>If the _Value contains the StringLIteralStartEndChar, then instances of this Char will be replaced with the Language.Constants.StringLIteralStartEndChar_DSStringValueReplacementChar</summary>
</member><member name="M:DocScript.Language.Variables.DSString.ToString">
	<summary>Returns a string to represent the Literal for the IDataValue</summary>
</member><member name="M:DocScript.Language.Variables.DSString.ToXML">
	<summary>Returns the Value of the current ISymbolTableValue inside a TagName of the Type</summary>
</member><member name="T:DocScript.Language.Variables.DSString">
	<summary>Represents a String of Chars</summary>
</member><member name="M:DocScript.Language.Variables.DSArray`1.ToString">
	<summary>Returns a string to represent the DSArray in the format {Item1, Item2, Item3}</summary>
</member><member name="M:DocScript.Language.Variables.DSArray`1.ToXML">
	<summary>Returns the Value of the current ISymbolTableValue inside a TagName of the Type</summary>
</member><member name="T:DocScript.Language.Variables.DSArray`1">
	<summary>
 Represents a List of DSString, DSNumber, or DSBoolean Objects
 NOTE: This Class does not Implement IDV(Of TElement) because that would create a member [Value As TElement], and out Value needs to be As List(Of TElement)
 </summary>
</member><member name="M:DocScript.Language.Variables.Void.#ctor">
	<summary>Throws an Exception</summary>
</member><member name="M:DocScript.Language.Variables.Void.ToXML">
	<summary>Throws an Exception</summary>
</member><member name="T:DocScript.Language.Variables.Void">
	<summary>Represents the absence of Data (Only valid as a Return Type for Functions)</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.Graphics">
	<summary>DS-Graphics</summary>
</member><member name="M:DocScript.CompilerExtentions.ObjectExtentions.MustBe``1(System.Object)">
	<summary>
 (MullNet CompilerExtention) Ensures that the _Object is of Type _TSoughtType, returning it if it is, and Throwing a DSException if it isn't.
 This method is useful for converting an Interface-based Type to a Class-based one.
 </summary>
	<typeparam name="_TSoughtType">If the _IDataValueObject isn't of this Type, then a DSException is Thrown.</typeparam>
	<param name="_Object">The Object to ensure the Type of.</param>
</member><member name="M:DocScript.CompilerExtentions.ObjectExtentions.Output``1(``0,System.Action{System.String},System.String)">
	<summary>(MullNet CompilerExtention) Runs the ToString() of the _Object through the specified _Action</summary>
</member><member name="M:DocScript.CompilerExtentions.ObjectExtentions.Repeat``1(``0,System.UInt64)">
	<summary>(MullNet CompilerExtention) Repeats the _Element _Times times.</summary>
</member><member name="M:DocScript.CompilerExtentions.ObjectExtentions.MustNotBeNothing``1(``0@,System.String)">
	<summary>(MullNet CompilerExtention) Ensures that the _Object IsNot Nothing, Throwing a NullReferanceException with the _MessageIfNull if it is</summary>
</member><member name="M:DocScript.CompilerExtentions.ObjectExtentions.MustNotBeNothing``1(``0@,System.Action)">
	<summary>(MullNet CompilerExtention) Determines if the _Object Is Nothing, Invoke()-ing the _ActionIfNull if it is</summary>
</member><member name="M:DocScript.CompilerExtentions.ObjectExtentions.ImplementsInterface``1(System.Object)">
	<summary>(MullNet CompilerExtention) Determines if the _Object Implements _TInterface</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.SplitAtWithoutRemoving(System.String,System.Char[])">
	<summary>
 (MullNet CompilerExtention) Splits the String whenever one of the _CharsAtWhichToSplitString occours, but the _CharAtWhichToSplitString stays in each New String
 <example>
 "Hello, World; Today" and {","c, ";"c} Becomes {"Hello", ", World", "; Today"}
 </example>
	</summary>
	<returns>The _InputString split at each occourance of a _CharAtWhichToSplitString</returns>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.WithLeadingWhiteSpaceRemoved(System.String)">
	<summary>
 (MullNet CompilerExtention) Returns a version of the string with any Spaces, Tabs, or LineBreak Characters which appear at the start of the String removed.
 </summary>
	<param name="_InputString">The String which may contain Leading Whitespace Characters</param>
	<returns>The String without the Leading (preceding) WhiteSpace Characters</returns>
	<remarks>Only returns the resultant output; does not modify the Input String. Chars removed (ASCII): 09, 10, 11, 12, 13, 32</remarks>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.WithTrailingWhiteSpaceRemoved(System.String)">
	<summary>
 (MullNet CompilerExtention) Returns a version of the string with any Spaces, Tabs, or LineBreak Characters which appear at the end of the String removed.
 </summary>
	<param name="_InputString">The String which may contain Trailing Whitespace Characters</param>
	<returns>The String without the Trailing (following) WhiteSpace Characters</returns>
	<remarks>Only returns the resultant output; does not modify the Input String. Chars removed (ASCII): 09, 10, 11, 12, 13, 32</remarks>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.RemoveFirstCharacter(System.String@)">
	<summary>
 (MullNet CompilerExtention) Removes the First Character from the String.
 Both Modifies the Parameter, and returns the post-computation Result.
 </summary>
	<param name="_InputString"></param>
	<returns></returns>
	<remarks>Both Modifies the Parameter, and returns the post-computation Result</remarks>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.WithFirstCharacterRemoved(System.String)">
	<summary>
 (MullNet CompilerExtention) Removes the First Character from the String.
 Only returns the post-computation Result; does NOT modify the input.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.RemoveLastCharacter(System.String@)">
	<summary>
 (MullNet CompilerExtention) Removes the Last Character from the String.
 Both Modifies the Parameter, and returns the post-computation Result.
 </summary>
	<param name="_InputString"></param>
	<returns></returns>
	<remarks>Both Modifies the Parameter, and returns the post-computation Result</remarks>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.WithLastCharacterRemoved(System.String)">
	<summary>
 (MullNet CompilerExtention) Removes the Last Character from the String.
 Only returns the post-computation Result; does NOT modify the input.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.IsEmpty(System.String)">
	<summary>
 (MullNet CompilerExtention) Evaluates weather or not the String is Empty. (WhiteSpace does not count as Empty)
 </summary>
	<param name="_InputString"></param>
	<returns>Retruns True if the String is Empty</returns>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.MatchesRegEx(System.String,System.String)">
	<summary>
 (MullNet CompilerExtention) Matches a String against a Regular Expression
 </summary>
	<param name="_StringToValidate"></param>
	<param name="_RegExPattern">The pattern to satisfy</param>
	<returns>Returns True if the RegExp is satisfied by the Input String.</returns>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.InSquares(System.String@)">
	<summary>(MullNet CompilerExtention) Returns in the form [_InputString$]</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.InCurlies(System.String@)">
	<summary>(MullNet CompilerExtention) Returns in the form {_InputString$}</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.InPointies(System.String@)">
	<summary>(MullNet CompilerExtention) Returns in the form &lt;_InputString$&gt;</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.InBrackets(System.String@)">
	<summary>(MullNet CompilerExtention) Returns in the form (_InputString$)</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.GetDigitChars(System.String@)">
	<summary>(MullNet CompilerExtention) Returns a string containing any Digit Chars (0 to 9) which were found in the _InputString$</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.TabbedInBy(System.String,System.Byte)">
	<summary>(MullNet CompilerExtention) Puts _NumberOfTabs Tabs at the start of each vbCrLf-delimited Line</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.OnlyAllowTheseChars(System.String,System.Char[])">
	<summary>(MullNet CompilerExtention) Returns a version of the _InputString, where only chars also appearing in _AllowedChars make it through to the returned string</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.Glue(System.String,System.String[])">
	<summary>(MullNet CompilerExtention) Returns a New String, directly joining in all the _SubsequentParts</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.GetMD5Hash(System.String)">
	<summary>(MullNet CompilerExtention) Computes and Returns the MD5 hash for the _InputString</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.PlainText_ToBase64(System.String)">
	<summary>(MullNet CompilerExtention) Computes and Returns the Base64-Representation of the _InputString</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.Base64_ToPlainText(System.String)">
	<summary>(MullNet CompilerExtention) Computes and Returns the PlainText, from a Base64-Encoded _InputString</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.ExtractUInt32(System.String)">
	<summary>(MullNet CompilerExtention) Filters for digit-chars, then attempts to parse an UInt32</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.WithoutBackslashOnEnd(System.String)">
	<summary>(MullNet CompilerExtention) If the _String ends with a [\], then returns the string without this.</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.WithBackslashOnEnd(System.String)">
	<summary>(MullNet CompilerExtention) If the _String ends with a [\], then returns the string, otherwise returns the string concatenated with a [\].</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.InTitleCase(System.String)">
	<summary>(MullNet CompilerExtention) E.g. "hello world" → "Hello World". E.g. "HELLO WORLD" → "Hello World"</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.IsValidFilePath_AndThatFileExists(System.String)">
	<summary>(MullNet CompilerExtention) E.g. "hello world" → "Hello World". E.g. "HELLO WORLD" → "Hello World"</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.ReadTextFromThisFile(System.String)">
	<summary>(MullNet CompilerExtention) Returns the Text from the _FilePath</summary>
</member><member name="M:DocScript.CompilerExtentions.StringExtentions.CamelCaseToSpacedString(System.String)">
	<summary>(MullNet CompilerExtention) E.g. "MyNameIsBen" → "My Name Is Ben"</summary>
</member><member name="M:DocScript.CompilerExtentions.NumericExtentions.IsPowerOfTwo(System.UInt32)">
	<summary>(MullNet CompilerExtention) Determines if _Number is a Po2, via: (x &amp; (x - 1)) == 0</summary>
</member><member name="M:DocScript.CompilerExtentions.DateTimeExtentions.GetLogSerialisation(System.DateTime@)">
	<summary>(MullNet CompilerExtention) Gets a short Date and Time String suitable for Logs, in the form "21-07 12:00:08.625"</summary>
</member><member name="M:DocScript.CompilerExtentions.ControlExtentions.InvokeIfRequired(System.Windows.Forms.Control,System.Action)">
	<summary>
 (MullNet CompilerExtention) Invokes the Control if required, and runs the specified _Action
 </summary>
</member><member name="M:DocScript.CompilerExtentions.ControlExtentions.InvokeIfRequired(System.Windows.Controls.Control@,System.Action@)">
	<summary>
 (MullNet CompilerExtention) Invokes the Control if required, and runs the specified _Action
 </summary>
</member><member name="M:DocScript.CompilerExtentions.ControlExtentions.GetText(System.Windows.Controls.RichTextBox@)">
	<summary>(MullNet CompilerExtention) Returns the Text from the RichTextBox</summary>
</member><member name="M:DocScript.CompilerExtentions.ControlExtentions.GetCaretLineAndColumn(System.Windows.Controls.RichTextBox@)">
	<summary>(MullNet CompilerExtention) Returns the Item1=Line and Item2=Column of the Caret in the RichTextBox</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.TakeBlockFromEnd``1(``0[]@,System.UInt32)">
	<summary>
 (MullNet CompilerExtention) Returns the last _Count Elements from the _Array
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.UpToButExcluding``1(``0[]@,System.Func{``0,System.Boolean})">
	<summary>
 (MullNet CompilerExtention) Returns all elements up to (but excluding) the first element where the _Condition is met.  Throws an Exception if there is not at least one element which meets the condition.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.UpToAndIncluding``1(``0[]@,System.Func{``0,System.Boolean})">
	<summary>
 (MullNet CompilerExtention) Returns all elements up to (and including) the first element where the _Condition is met. Throws an Exception if there is not at least one element which meets the condition.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.UpToAndIncludingLast``1(``0[]@,System.Func{``0,System.Boolean})">
	<summary>
 (MullNet CompilerExtention) Returns all elements up to (and including) the last element where the _Condition is met. Throws an Exception if there is not at least one element which meets the condition.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.UpToButExcludingLast``1(``0[]@,System.Func{``0,System.Boolean})">
	<summary>
 (MullNet CompilerExtention) Returns all elements up to (but excluding) the last element where the _Condition is met. Throws an Exception if there is not at least one element which meets the condition.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.SplitWhere``1(``0[]@,System.Func{``0,System.Boolean})">
	<summary>
 (MullNet CompilerExtention) Returns chunks of Elements split by any Element where the _Condition is met. None of the Elements which meet the _Condition will end up in the output groups
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.ReplaceWhere``1(``0[],System.Func{``0,System.Boolean},``0)">
	<summary>
 (MullNet CompilerExtention) Returns a version of the _Array wherein all Elements in the _Array which meet the _Condition are replaced with the _Replacement
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.IndexOfFirstWhere``1(``0[],System.Func{``0,System.Boolean})">
	<summary>
 (MullNet CompilerExtention) Returns the Index of the first element to satisfy the _Condition. Throws an Exception if no elements satisfy the _Condition.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.IndexOfLastWhere``1(``0[],System.Func{``0,System.Boolean})">
	<summary>
 (MullNet CompilerExtention) Returns the Index of the last element to satisfy the _Condition. Throws an Exception if no elements satisfy the _Condition.
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.AllElementsAreUnique``1(``0[])">
	<summary>(MullNet CompilerExtention) Evaluates weather or not each Element in the _Array is unique. In other words, False is Returned if two or more elements are the same.</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.GetInclusiveRange``1(System.Collections.Generic.List{``0},System.UInt16,System.UInt16)">
	<summary>(MullNet CompilerExtention) Returns the Elements starting at _StartIndex, and including all Elements up to _EndIndex</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.GetStandardArraySerialisation``1(``0[],System.String)">
	<summary>(MullNet CompilerExtention) Gets the ToString() of each Element in the _Array, and serialises these Strings into the form {String1, String2, String3}</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.Intersperse``1(``0[],``0[],System.UInt32)">
	<summary>
 (MullNet CompilerExtention) Returns a version of the _Array where the _FillerBlock is inserted after each _HowOften elements.
 Does not insert any instances of the _FillerBlock past the end of the _Array's last Element
 </summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.AllButLast``1(``0[])">
	<summary>(MullNet CompilerExtention) Returns all but the very last Element in the _Array</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.GetAllKeys``2(System.Collections.ObjectModel.ReadOnlyCollection{System.Collections.Generic.KeyValuePair{``0,``1}})">
	<summary>(MullNet CompilerExtention) Returns all the Keys in the Read-only Dictionary</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.ForEachItem``1(System.Collections.ObjectModel.ReadOnlyCollection{``0}@,System.Action{``0})">
	<summary>(MullNet CompilerExtention) Executes the _Action for each Element in the _ReadOnlyCollection(Of _TElement)</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.GenerateUniqueString(System.String[]@,System.String)">
	<summary>(MullNet CompilerExtention) Returns a value which isn't equal to any of the existing strings, based off of the _Seed.
 The returned value will ALWAYS be the same length as the _Seed, but if it is not possible to create a new value within that number of characters, then this method will Throw an Exception.
 If the _Seed is empty, and still not contained in the _StringArray, then an Exception will be Thrown.
 The SubstitutionChars are 0123456789ABCDEFGHIJKLNMOPQRSTUVWXYZ</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.SubstitutedAtIndex``1(``0[],System.Int32,``0)">
	<summary>(MullNet CompilerExtention) Returns a version of the _Array wherein the Element at _Index is replaced with the _Substitution</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.EachToUpper(System.String[]@)">
	<summary>(MullNet CompilerExtention) Returns each String, in a ToUpper()-ed state</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.RemoveFromEnd``1(``0[],System.UInt32)">
	<summary>(MullNet CompilerExtention) Returns a new Array, wherein _NumElementsToRemoveFromEnd have been chopped off of the end of the input _Array</summary>
</member><member name="M:DocScript.CompilerExtentions.CollectionTypeExtentions.ItemOrDefault``2(System.Collections.Generic.Dictionary{``0,``1}@,``0,``1)">
	<summary>(MullNet CompilerExtention) Returns the Value corrosponding to _Key, unless the _Dictionary dosen't contain _Key, in which case _DefaultValue is returned</summary>
</member><member name="M:DocScript.CompilerExtentions.IOObjectExtentions.FileHereIn(System.IO.DirectoryInfo@,System.String)">
	<summary>(MullNet CompilerExtention) Returns an IO.FileInfo pointing to the file with that name, within the _Directory</summary>
</member><member name="M:DocScript.CompilerExtentions.WebObjectExtentions.WriteAndEnd(System.Web.HttpResponse@,System.String)">
	<summary>
 (MullNet CompilerExtention) Writes to, and then Ends the Response Stream
 </summary>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.WebObjectExtentions.ClearAndWriteAndEnd(System.Web.HttpResponse@,System.String)">
	<summary>
 (MullNet CompilerExtention) Clears, Writes to, and then Ends the Response Stream
 </summary>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.WebObjectExtentions.SafelyEnd(System.Web.HttpResponse@)">
	<summary>
 (MullNet CompilerExtention) Ends the Response Stream, without Throwing the "Thread was being aborted" Exception
 </summary>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.WebObjectExtentions.QueryStringIsSpecified(System.Web.HttpRequest@,System.String)">
	<summary>
 (MullNet CompilerExtention) Checks that the Specified QueryString is contained in the current Request Object.
 </summary>
	<param name="_RequestObject"></param>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.WebObjectExtentions.PostDataItemIsSpecified(System.Web.HttpRequest@,System.String)">
	<summary>
 (MullNet CompilerExtention) Checks that the Specified PostData Item is contained in the current Request Object.
 </summary>
	<param name="_RequestObject"></param>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.WebObjectExtentions.QueryStringIsSpecifiedAndHasValue(System.Web.HttpRequest@,System.String)">
	<summary>
 (MullNet CompilerExtention) Checks that the Specified QueryString is contained in the current Request Object, and that it has a Value.
 </summary>
	<param name="_RequestObject"></param>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.WebObjectExtentions.PostDataItemIsSpecifiedAndHasValue(System.Web.HttpRequest@,System.String)">
	<summary>
 (MullNet CompilerExtention) Checks that the Specified PostData Item is contained in the current Request Object, and that it has a Value.
 </summary>
	<param name="_RequestObject"></param>
	<remarks></remarks>
</member><member name="M:DocScript.CompilerExtentions.XMLObjectExtentions.WrapIn(System.Xml.Linq.XElement,System.String)">
	<summary>(MullNet CompilerExtention) Returns a version of the _XElement wrapped in an XML Parent Node with name _OuterNodeName$</summary>
</member><member name="M:DocScript.CompilerExtentions.XMLObjectExtentions.WrapIn(System.Xml.Linq.XElement[],System.String)">
	<summary>(MullNet CompilerExtention) Returns a new XElement which contains the _XElements</summary>
</member><member name="M:DocScript.CompilerExtentions.XMLObjectExtentions.FirstOrEmptyNode(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
	<summary>(MullNet CompilerExtention) Returns the first in the series of XElements, otherwise an XElement that looks like: &lt;Empty/&gt;</summary>
</member><member name="M:DocScript.CompilerExtentions.XMLObjectExtentions.WriteToConsoleWithXMLColourFormatting(System.Xml.Linq.XElement,System.String)">
	<summary>(MullNet CompilerExtention) Writes the XElement onto the current Process's Console, using coloured formatting.</summary>
	<param name="_TabChar">The character to use for Indenting the XML</param>
</member><member name="M:DocScript.CompilerExtentions.XMLObjectExtentions.ToTabFormattedString(System.Xml.Linq.XElement,System.String)">
	<summary>(MullNet CompilerExtention) Produces a properly-formatted Tabbed-in serialisation of _XElement</summary>
	<param name="_TabChar">The character to use for Indenting the XML</param>
</member><member name="M:DocScript.CompilerExtentions.DocScriptObjectExtentions.GetValuesAndLocationsString(DocScript.Runtime.Token[])">
	<summary>(MullNet CompilerExtention) Produces a simple serialisation of the _Tokens with just their Values and Locations in the form [Raw: "A:", WithLocations: {["A" @14,6], [":" @14,7]}]</summary>
</member><member name="M:DocScript.CompilerExtentions.DocScriptObjectExtentions.ReconstructIntoSource(DocScript.Runtime.Token[],System.String)">
	<summary>(MullNet CompilerExtention) Concatenates the Tokens' Values back together</summary>
</member><member name="M:DocScript.CompilerExtentions.DocScriptObjectExtentions.SatisfiesTPV(DocScript.Runtime.Token[],DocScript.Runtime.TokenPatternValidation.TokensToPatternsValidator)">
	<summary>(MullNet CompilerExtention) Returns weather or not the _TPV is satisfied by the _Tokens</summary>
</member><member name="M:DocScript.CompilerExtentions.DocScriptObjectExtentions.Coerce``1(DocScript.Language.Variables.IDataValue)">
	<summary>(MullNet CompilerExtention) Attempts to coerce the _InputIDV into an IDV of type _TSoughtIDV</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.Get2DArray``1(``0[][])">
	<summary>
 (MullNet UsefulMethod) Returns a _TElement()() from the Array of _TElement Arrays
 </summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ConsoleWriteLineInColour(System.String,System.ConsoleColor)">
	<summary>(MullNet UsefulMethod) Writes the _Text to the _Console in the specified _ConsoleColour</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ConsoleWriteLineInColour(System.String,System.ConsoleColor,System.ConsoleColor)">
	<summary>(MullNet UsefulMethod) Writes the _Text to the _Console in the specified _ForegroundColour, and using the specified _BackgroundColour</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ConsoleWriteInColour(System.String,System.ConsoleColor)">
	<summary>(MullNet UsefulMethod) Writes the _Text to the _Console in the specified _ConsoleColour, without a LineBreak on the end</summary>
	<remarks>DSCompilation's DSPackage.VB mechanism releis on this method!</remarks>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ConsoleWriteInColour(System.String,System.ConsoleColor,System.ConsoleColor)">
	<summary>(MullNet UsefulMethod) Writes the _Text to the _Console in the specified _ForegroundColour (without a LineBreak on the end), and using the specified _BackgroundColour</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ConsoleErrorWriteLineInColour(System.String,System.ConsoleColor)">
	<summary>(MullNet UsefulMethod) Writes the _Text to the _Console in the specified _ConsoleColour</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ConsoleErrorWriteInColour(System.String,System.ConsoleColor)">
	<summary>(MullNet UsefulMethod) Writes the _Text to the _Console in the specified _ConsoleColour, without a LineBreak on the end</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ContainsWellBalencedPairs``1(``0[],System.Tuple{``0,``0}[])">
	<summary>
 (MullNet UsefulMethod)
 Ensures that for each opening component in the _Pairs, there is an instance of the corrosponding closing component.
 Also makes sure that the _Pairs components are opened in a ballenced fashion.
 E.g. if done with brackets, then "([])" would be valid, whereas "([)]" would not be (even though there are the same number of brackets and squares in the latter).
 
 Example Call: ContainsWellBalencedPairs(Of String)({"Open", "Null", "Null", "Close", "Null", "Close"}, New Tuple(Of String, String)("Open", "Close"))
 <example>ContainsWellBalencedPairs(Of String)({"Open", "Null", "Null", "Close", "Null", "Close"}, New Tuple(Of String, String)("Open", "Close"))</example>
 
 How this Function works:
 'Declare a _TItems Stack
 For Each Item In _JustTheRelevantItems
 If the Item is an Opening Component (_Pair.Item1) then push it onto stack
 If the Item is a Closing Component (_Pair.Item2) then pop from stack and if the popped Item is the matching Opening Component then fine, but otherwise the Items are not balanced
 After complete traversal, if there is an Opening Component left in stack then the source is not balanced
 </summary>
	<typeparam name="_TItems">The DataType of each Item in the _AllItems, and of a component in the _Pairs</typeparam>
	<param name="_AllItems">A List of _TItems, not all of which have to be Items seen in the _Pairs. E.g. could be all source token even if you just want to validate the balencedness of brackets.</param>
	<param name="_Pairs">The Pairs which have to be balenced. Item1 = the Opening Component E.g. "("; Item2 = the Closing Component E.g. ")"</param>
	<returns>Weather or not _AllItems contained well-balenced Pairs</returns>
	<remarks>Implemented 24-08-2022 so that Brackets and Statements may make use of it</remarks>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.AllocConsole">
	<summary>(MullNet UsefulMethod) For Procuring a Console if DS Console Logging has been selected</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.FreeConsole">
	<summary>(MullNet UsefulMethod) Hides the active console window. Much easier than using ShowWindow on the current process.</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.GetAlphabetAndNumericChars">
	<summary>(MullNet UsefulMethod) Returns: 0123456789ABCDEFGHIJKLNMOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.GetRandomString(System.UInt16)">
	<summary>(MullNet UsefulMethod) Returns a random String using the Chars 0123456789ABCDEFGHIJKLNMOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.RequestFilePath_WithSaveFileDialog(System.String,System.Tuple{System.String,System.String}[],System.String)">
	<summary>(MullNet UsefulMethod) Uses an STA Thread (Message-Pumping) to display a SaveFileDialog, and returns the Selected File, or NOTHING.</summary>
	<param name="_TargetFileExtentions">E.g. ("Hypertext Markup", "HTML") or ("Plaintext", "TXT"). The [All Files (*.*)] Option is automatically added by this method. Instanciation: New Tuple(Of String, String)("All Files", "*")</param>
	<param name="_InitialDirectory">E.g. Environment.GetFolderPath(Environment.SpecialFolder.MyComputer)</param>
	<remarks>
 E.g. UsefulMethods.RequestFilePath_WithSaveFileDialog("Browse for EXE Output File...", {New Tuple(Of [String], [String])("PE Binary Executables", "EXE")})
 </remarks>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.RequestFilePath_WithOpenFileDialog(System.String,System.Tuple{System.String,System.String}[],System.String)">
	<summary>(MullNet UsefulMethod) Uses an STA Thread (Message-Pumping) to display a OpenFileDialog, and returns the Selected File, or NOTHING.</summary>
	<param name="_TargetFileExtentions">E.g. ("Hypertext Markup", "HTML") or ("Plaintext", "TXT"). The [All Files (*.*)] Option is automatically added by this method. Instanciation: New Tuple(Of [String], [String])("All Files", "*")</param>
	<param name="_InitialDirectory">E.g. Environment.GetFolderPath(Environment.SpecialFolder.MyComputer)</param>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.GetExecutingAssemblyDirectory">
	<summary>(MullNet UsefulMethod) Returns the directory of the current exe</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.GetExecutingAssemblyFilePath">
	<summary>(MullNet UsefulMethod) Returns the file (path) of the current exe</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.RunProcess_AndReturnCommandLineOutput(System.IO.FileInfo,System.String)">
	<summary>(MullNet UsefulMethod) Executes the process, capturing and returning the CLI Output. Returns both the STDOUT and STDERR.</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.RunProcess_AndReturnCommandLineOutput(System.Diagnostics.Process@)">
	<summary>(MullNet UsefulMethod) Executes the process, capturing and returning the CLI Output. The ExitCode can be resolved from the input Process Object. Waits for the process to exit completely before returning any output.</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.Result_OrFalseOnException(System.Func{System.Boolean}@)">
	<summary>(MullNet UsefulMethod) Attempts to resolve the Function to a value of type Boolean, but returns False if an Exception is Thrown whilst attempting to perform this resolution</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ShowTextInNewWindow(System.String,System.String)">
	<summary>(MullNet UsefulMethod) Shows the _Text in a Form with a Copy and SaveAs button at the top. This is all done in a NEW STA Thread.</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ShowImageInNewWindow(System.String,System.Drawing.Bitmap)">
	<summary>(MullNet UsefulMethod) Shows the _Image in a Form with a Copy and SaveAs button at the top. This is all done in a NEW STA Thread.</summary>
</member><member name="M:DocScript.CompilerExtentions.UsefulMethods.ShowURLContentsInNewWindow(System.String,System.String)">
	<summary>(MullNet UsefulMethod) Shows the Contents of the URL (a Web address, local HTML file, or file directory) in a Form. This is all done in a NEW STA Thread.</summary>
</member><member name="T:DocScript.CompilerExtentions.UsefulMethods">
	<summary>
 Non-CompilerExtention Useful Methods which need to be accessible without Namespace qualification
 Some of these can't be CompilerExtentions E.g. because they take in a ParamArray as the first Argument
 </summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.ConstructExpressionFromTokens(DocScript.Runtime.Token[]@)">
	<summary>Constructs a Tree for an Expression, from the Tokens which make up that Expr.</summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.GetTreeViewNodeFromExpr(DocScript.Language.Expressions.IExpression@)">
	<summary>Constructs a WinForms TreeView Node from a constructed IExpression</summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.ConstructExpressionFromXML(System.Xml.Linq.XElement)">
	<summary>
 Constructs a Tree for an Expression, from an XML Expression Serialisation, as produced by IExpression.GetExprTreeNodeXML().
 The XElement passed in should have one of these Tag Names: OperatorExpr, LiteralExpr, FunctionCallExpr, VariableExpr.
 </summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.PerformInitialValidationOnRawTokens_(DocScript.Runtime.Token[]@)">
	<summary>Ensures that the Tokens are of permitted TokenTypes, and that there are equal numbers of opening and closing Brackets.</summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.ProduceLBL_(DocScript.Runtime.Token[]@,System.Int32)">
	<summary>Returns [the Index of the Last Token read by that call], and [the LBL generated from the Tokens read]</summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.SimplifyLBL_(DocScript.Language.Expressions.IExpression[])">
	<summary>Removes and one-child BracketedExprs, recursively inside BracketedExprs and FunctionCalls too</summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.ValidateLBL_(DocScript.Language.Expressions.IExpression[])">
	<summary>Ensures there are no occourances of Illegal patterns in the LBL</summary>
</member><member name="T:DocScript.Language.Expressions.ExprUtilities.OperatorTupleComparer_">
	<summary>Used by the CollapseToIOT_() Method to order the OperatorTuples</summary>
</member><member name="M:DocScript.Language.Expressions.ExprUtilities.CollapseToIOT_(DocScript.Language.Expressions.IExpression[])">
	<summary>Removes LBL-Only IExprs and forms the Expr. Tree and adds in the [OperatorExpr]s and [FunctionCallExpr]s</summary>
</member><member name="T:DocScript.Language.Expressions.ExprUtilities">
	<summary>Contains Expression Construction Resources</summary>
</member><member name="T:DocScript.Runtime.Token.TokenType">
	<summary>Represents the Catagorical Vareity of a Token</summary>
</member><member name="M:DocScript.Runtime.Token.TokenLocation.ToString">
	<summary>Returns a KVPSerialised String to represent the Data of the current Object</summary>
</member><member name="M:DocScript.Runtime.Token.TokenLocation.ToShortString">
	<summary>Returns a Shortened String, in the Form (E.g.) [14,7]</summary>
</member><member name="T:DocScript.Runtime.Token.TokenLocation">
	<summary>Represents the original location of a Token in the Source</summary>
</member><member name="M:DocScript.Runtime.Token.#ctor(System.String,DocScript.Runtime.Token.TokenType,System.UInt16,System.UInt16)">
	<summary>Constructs a new Token from a Value string, TokenType, and Location-in-source</summary>
</member><member name="M:DocScript.Runtime.Token.FromXML(System.Xml.Linq.XElement)">
	<summary>SideLoading Constructor: </summary>
</member><member name="M:DocScript.Runtime.Token.ToString">
	<summary>Returns a KVPSerialised String to represent the Data of the current Object</summary>
</member><member name="M:DocScript.Runtime.Token.ToXML">
	<summary>Returns a KVPSerialised XML Object with the members of the current object</summary>
</member><member name="T:DocScript.Runtime.Token">
	<summary>Represents a Segmented String with a TokenType, from the Source of a DocScript Program</summary>
</member><member name="M:DocScript.Runtime.Remoting.WMI_CreateRemoteProcess(System.String,System.String,System.String,System.String)">
	<summary>
 Uses WMI to run the specified command line on the remote Windows(TM) computer.
 </summary>
	<param name="_TargetPC_HostnameOrIP">E.g. "192.168.1.85"</param>
	<param name="_Username_ForTargetPC">E.g. ".\Administrator"</param>
	<param name="_Password_ForTargetPC">E.g. "Pass!123"</param>
	<param name="_CommandLineToRun_OnRemotePC">E.g. "C:\Res\DSCLI.exe C:\Res\Script.DS"</param>
	<remarks></remarks>
</member><member name="M:DocScript.Runtime.Remoting.CopyFiles_ToRemoteComputer(System.IO.DirectoryInfo,System.String,System.String,System.IO.FileInfo[])">
	<summary>
 Copies each of the _FilesToCopyThither into the _UNCDirectoryOnRemotePC_IntoWhichFilesWillBeCopied, using the specified credentials.
 </summary>
	<param name="_RemotePC_Username">E.g. ".\Administrator"</param>
	<param name="_RemotePC_Password">E.g. "Pass!123"</param>
	<param name="_UNCDirectoryOnRemotePC_IntoWhichFilesWillBeCopied">E.g. "\\192.168.1.85\C$\Windows\DSRemoting\". The presence/absence of a trailing Backslash [\] is accounted-for.</param>
	<param name="_FilesToCopyThither">E.g. {"C:\File1.txt", "F:\Folder\File2.PNG"}</param>
	<remarks></remarks>
</member><member name="M:DocScript.Runtime.Remoting.DeleteFiles_FromRemoteComputer(System.IO.DirectoryInfo,System.String,System.String,System.String[])">
	<summary>
 Deletes each _NamesOfFilesWithinThatUNCDirectory_ToBeDeleted File, from the _UNCDirectoryOnRemotePC_FromWhichFilesWillBeDeleted, using the specified credentials.
 </summary>
	<param name="_RemotePC_Username">E.g. ".\Administrator"</param>
	<param name="_RemotePC_Password">E.g. "Pass!123"</param>
	<param name="_UNCDirectoryOnRemotePC_FromWhichFilesWillBeDeleted">E.g. "\\192.168.1.85\C$\Windows\DSRemoting\". The presence/absence of a trailing Backslash [\] is accounted-for.</param>
	<param name="_NamesOfFilesWithinThatUNCDirectory_ToBeDeleted">E.g. {"File1.txt", "Folder\File2.PNG"}</param>
	<remarks></remarks>
</member><member name="M:DocScript.Runtime.Remoting.DeleteDirectory_FromRemoteComputer(System.IO.DirectoryInfo,System.String,System.String)">
	<summary>
 Deletes the _UNCDirectoryOnRemotePC_ToDelete, using the specified credentials. The contents of the directory are also deleted (recursively).
 </summary>
	<param name="_RemotePC_Username">E.g. ".\Administrator"</param>
	<param name="_RemotePC_Password">E.g. "Pass!123"</param>
	<param name="_UNCDirectoryOnRemotePC_ToDelete">E.g. "\\192.168.1.85\C$\Windows\DSRemoting\". The presence/absence of a trailing Backslash [\] is accounted-for.</param>
</member><member name="M:DocScript.Runtime.Remoting.GetContents_OfRemoteDirectory(System.IO.DirectoryInfo,System.String,System.String)">
	<summary>
 Gets the directory-contents for the _UNCDirectoryOnRemotePC. FileSystemInfo is inherited by both FileInfo and DirectoryInfo.
 </summary>
	<param name="_RemotePC_Username">E.g. ".\Administrator"</param>
	<param name="_RemotePC_Password">E.g. "Pass!123"</param>
	<param name="_UNCDirectoryOnRemotePC">E.g. "\\192.168.1.85\C$\Windows\DSRemoting\". The presence/absence of a trailing Backslash [\] is accounted-for.</param>
</member><member name="M:DocScript.Runtime.Remoting.AuthenticateWithNetworkFolder(System.String,System.String,System.String)">
	<summary>Associates the specified credentials with the specified share (e.g. _UNCPath:="\\192.168.1.5\C$")</summary>
</member><member name="M:DocScript.Runtime.Remoting.RemoveCredentialsAssociatedWithNetworkFolder(System.String,System.Boolean)">
	<summary>Un-registars all association between the share and any credentials which were mapped to it</summary>
</member><member name="T:DocScript.Runtime.Remoting">
	<summary>Contains resources for executing DocScript programs on remote computers</summary>
</member><member name="P:DocScript.Runtime.StandardBuiltInFunctions.IgnoreBreakpoints">
	<summary>Indicates that the "Break()" BIF should silently be skipped, instead of showing the Breakpoint-Action-Dialog.</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.BIF_Break_Identifier_">
	<summary>Needs to be publicly visible for DSIDE's [Insert Breakpoint] Button</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.BIF_Break_">
	<summary>The DSIDE BIF to pause execution and e.g. inspect the current variables. In the DebugBIF's File, but not a member of the Debug Namespace</summary>
	<remarks>Does NOT start with "Debug_"</remarks>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.BIF_Debug_ShowSymbolTables_Identifier_">
	<summary>Needs to be publically visible for the BreakpointActionDialog</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.BIF_Debug_StartDSLiveSessionFromCurrentExecutionState_Identifier_">
	<summary>Needs to be publically visible for the BreakpointActionDialog</summary>
</member><member name="F:DocScript.Runtime.StandardBuiltInFunctions.Debug">
	<summary>DocScript Debugging Utilities for SymbolTables, BIFs, and more.</summary>
</member><member name="T:DocScript.Language.Constants">
	<summary>An Uninheritable, Uninstanciatable Class holding Language-Level Constants for DocScript. See Also: DocScript.Runtime.Constants</summary>
</member><member name="T:DocScript.Language.Expressions.Operators.DSOperator">
	<summary>The Base Class for UnaryOperator and BinaryOperator</summary>
</member><member name="T:DocScript.Language.Expressions.Operators.UnaryOperator">
	<summary>Represents an Operator with one Operand</summary>
</member><member name="T:DocScript.Language.Expressions.Operators.BinaryOperator">
	<summary>Represents an Operator with two Operands</summary>
</member><member name="F:DocScript.Language.Instructions.Statements.DSFunction.Parameter.Identifier">
	<summary>The Unique Identifier for the Parameter</summary>
</member><member name="F:DocScript.Language.Instructions.Statements.DSFunction.Parameter.DataType">
	<summary>The DataType must be an IDataValue-based DocScript DataType e.g. DSBoolean</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Parameter.#ctor(System.String,System.Type)">
	<summary>The DataType must be a DocScript DataType e.g. &lt;Number&gt;. Use the IDataValue Types herefor.</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Parameter.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Parameter, with the Identifier and DataType</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Parameter.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Parameter.ToString">
	<summary>Returns what the Argument would have looked like in the Source, without an extra LineBreak on the End</summary>
</member><member name="T:DocScript.Language.Instructions.Statements.DSFunction.Parameter">
	<summary>Represents a Placeholder for an Argument, used as a Local Variable within a DSFunction. (Parameter == Placeholder; Argument == A Datum applied to a Parameter at Runtime)</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Signature.#ctor(System.String,System.Type[],System.Type)">
	<summary>The Identifier will be ToUpper()-ed</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Signature.ToString">
	<summary>Returns a KVP-Serialised String to represent the current Object</summary>
</member><member name="T:DocScript.Language.Instructions.Statements.DSFunction.Signature">
	<summary>Contains an UPPERCASE Identifier, ParameterTypes Array, and ReturnType Property</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.#ctor(System.String,System.Type,DocScript.Language.Instructions.Statements.DSFunction.Parameter[],System.Collections.Generic.List{DocScript.Language.Instructions.IInstruction})">
	<summary>Constructs the IInstruction from an existing instance</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.#ctor(DocScript.Runtime.Token[]@)">
	<summary>Constructs the IInstruction from its Tokens</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Execute(DocScript.Runtime.SymbolTablesSnapshot)">
	<summary>DO NOT CALL; Use Run().</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.Run(DocScript.Runtime.SymbolTablesSnapshot,DocScript.Language.Variables.IDataValue[])">
	<summary>
 The Arguments are IDataValues and not IExpressions, because if the Exprs referanced a variable Local to ANOTHER DSFUNCTION, then it wouldn't be accessible here!
 DSFunction Symbol Table Rules:
     - A DSFunction may take in several SymbolTables, but only pays attention to the Globals on the bottom
     - A DSFunction only returns the Global Symbol Table
 </summary>
</member><member name="P:DocScript.Language.Instructions.Statements.DSFunction.EffectiveSignature">
	<summary>Contains an UPPERCASE Identifier, ParameterTypes Array, and ReturnType Property</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.GetProgramTreeNodeXML">
	<summary>Returns an XML Representation of the Instruction, with all Propities and Child Structres included</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.FromXML(System.Xml.Linq.XElement)">
	<summary>Constructs an instance of the IInstruction class from its XML serialasation</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.ToString">
	<summary>Returns what the Instruction would have looked like in the Source, without an extra LineBreak on the End.</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.DSFunction.ToXML">
	<summary>Returns the Value of the current ISymbolTableValue inside a TagName of the Type</summary>
</member><member name="T:DocScript.Language.Instructions.Statements.DSFunction">
	<summary>Represents E.g. [Function &lt;DataType&gt; Identifier (Arguments...)]</summary>
</member><member name="T:DocScript.Language.Instructions.Statements.IStatement">
	<summary>The Base Interface for all Statement Instructions in DocScript (E.g. Implemented by DSFunction and IfStatement)</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.StatementUtilities.GetStatementContentsFromTokens(DocScript.Runtime.Token[])">
	<summary>The Lexing Function to construct the contents of a DSFunction, IfStatement, WhileStatement, or LoopStatement</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.StatementUtilities.GetSubStatementFromRemainingTokens_(DocScript.Runtime.Token[]@)">
	<summary>Returns [1] The first possible IStatement which could be constructed, and [2] The Left-over Tokens which followed [the Tokens of the constructed IStatement Object]</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.StatementUtilities.GetSubStatementTokens_(System.Type,DocScript.Runtime.Token[])">
	<summary>Takes in some Tokens which begin with a Statement, and returns only the Tokens for that Statement.</summary>
	<param name="_AllRemainingTokens">Must start with a Statement-Opening Keyword</param>
	<param name="_IStatementType">Either IfStatement, WhileStatement, or LoopStatement</param>
</member><member name="M:DocScript.Language.Instructions.Statements.StatementUtilities.GetStatementContentsFromXML(System.Xml.Linq.XElement[])">
	<summary>Takes in VariableAssignment, VariableDeclaration, ReturnToCaller, FunctionCall, IfStatement, WhileStatement, and LoopStatement XML Nodes, and returns the equivalent IInstruciton Objects</summary>
</member><member name="M:DocScript.Language.Instructions.Statements.StatementUtilities.ReconstructStatementContentsAsSource(DocScript.Language.Instructions.IInstruction[]@)">
	<summary>
 Recursivly reconstructs the IInstructions as DocScript Source.
 Keywords all become UPPERCASE, and Tabs are inserted according to SubStatement Depth
 Update 02072023: In what's returned, there is NO WHITESPACE on either side of the returned String
 <para>
 (actually that's not done herein, but rather, in the ToString() Methods of the Statement Classes...)
 ((...But the return value from this function has the same effect applied...))
 (((...Because this function just calls the ToString() method on each IInstruction, and concatenates them with some ancilliary formatting...)))
 ((((...In the form of a {LineBreak} betwixt each IInstruciton.ToString().))))
 </para>
	</summary>
</member><member name="M:DocScript.Runtime.Optimisation.ComponentOptimiser.OptimiseProgram(DocScript.Runtime.Program)">
	<summary>Returns an optimised version of _Program</summary>
</member><member name="M:DocScript.Runtime.Optimisation.ComponentOptimiser.OptimiseStatementContents(DocScript.Language.Instructions.IInstruction[])">
	<summary>
 Applies the following optimisations:
 	- Removal of unreachable instructions
 	- (Expression-based optimisation on any Expressions contained within the _IInstructions)
 </summary>
</member><member name="M:DocScript.Runtime.Optimisation.ComponentOptimiser.ApplyExpressionOptimisationToStatementContents_(DocScript.Language.Instructions.IInstruction[])">
	<summary>Recursively puts any IExpressions contained in the Instructions through OptimiseExpression()</summary>
</member><member name="M:DocScript.Runtime.Optimisation.ComponentOptimiser.RemoveUnreachableIInstructions_(DocScript.Language.Instructions.IInstruction[])">
	<summary>Recursively optimises the Contents of an IStatement. This is not an OptimisationAction itself, but passes the IInstructions through other OptimisationActions.</summary>
</member><member name="M:DocScript.Runtime.Optimisation.ComponentOptimiser.OptimiseExpression(DocScript.Language.Expressions.IExpression)">
	<summary>
 Applies the following optimisations:
 	- Constant Expression Evaluation (e.g. [5 + 4] → [9])
 	- Bitwise-shift instead of power-of-two multiplications (e.g. [Age * 8] → [Maths_Bitshift_Left(Age, 3)])
 </summary>
</member><member name="M:DocScript.Runtime.Optimisation.ComponentOptimiser.SubstitutePowerOfTwoMultiplication_WithBitshift_(DocScript.Language.Expressions.IExpression)">
	<summary>Converts Multiplications by powers of two into BitShifts where possible</summary>
</member><member name="M:DocScript.Runtime.Optimisation.ComponentOptimiser.SubstituteConstantExpr_WithEvaluationThereof_(DocScript.Language.Expressions.IExpression)">
	<summary>Performs Compile-time Evaluation where possible</summary>
</member><member name="T:DocScript.Runtime.Optimisation.ComponentOptimiser">
	<summary>
 The reason this is a Class, and not just methods in a Module, is because the PerformedOptimisationsTally is specific to the optimisation of a given Component (Expression, IInstruction, or Program).
 If the PerformedOptimisations dictionary was just floating in the Module, then the tracking of which optimisations have occured would break in a multi-threaded scenario.
 </summary>
</member><member name="T:DocScript.Runtime.Optimisation">
	<summary>Contains resources for optimising a DocScript Program to make it run more efficiently</summary>
</member><member name="F:DocScript.Runtime.Program.ValidEntryPointFunction_Signature_Unadorned">
	<summary>The plain EntryPoint with no Input or Output. Used by Program.IsEntryPointFunctionSignature()</summary>
</member><member name="F:DocScript.Runtime.Program.ValidEntryPointFunction_Signature_OSInterop">
	<summary>The EntryPoint for OperatingSystem-Interoperability. Used by Program.IsEntryPointFunctionSignature()</summary>
</member><member name="M:DocScript.Runtime.Program.GetFunctionsAndGlobalVarDecsFromTokens_(DocScript.Runtime.Token[]@)">
	<summary>Item1 = The DSFunctions; Item2 = The GlobalVarDecs;</summary>
</member><member name="M:DocScript.Runtime.Program.GenerateGlobalSymbolTable(DocScript.Runtime.ExecutionContext@)">
	<summary>Produces a New SymbolTable with the BuiltInFunctions from the ExecutionContext</summary>
</member><member name="P:DocScript.Runtime.Program.IsEntryPointFunctionSignature(DocScript.Language.Instructions.Statements.DSFunction.Signature)">
	<summary>Determines weather or not the _FunctionSignature is that of a DocScript EntryPoint Function [Main]</summary>
</member><member name="P:DocScript.Runtime.Program.GlobalSymbolTable">
	<summary>The state of this Symbol Table persists after Program Execution, for analysis purposes</summary>
</member><member name="P:DocScript.Runtime.Program.ExecutionContext">
	<summary>This *CAN BE NOTHING*, meaning that the Program should never be executed and is simply for e.g. producing an [XML Program Tree]</summary>
</member><member name="P:DocScript.Runtime.Program.ExitCode">
	<summary>The Code returned by the DocScript program (if there is one), otherwise [DocScript.Runtime.Constants.ProgramExitCode_Default]</summary>
</member><member name="P:DocScript.Runtime.Program.Functions">
	<summary>The DSFunctions from the DocScript Source</summary>
</member><member name="P:DocScript.Runtime.Program.GlobalVarDecs">
	<summary>The Global VariableDeclarations from the DocScript Source</summary>
</member><member name="F:DocScript.Runtime.Program.Name">
	<summary>Used when Compiling the DocScript Program to an EXE</summary>
</member><member name="F:DocScript.Runtime.Program.HasBeenOptimised">
	<summary>Indicates that the Program has undergone DocScript Runtime Optimisation</summary>
</member><member name="M:DocScript.Runtime.Program.#ctor(DocScript.Language.Instructions.VariableDeclaration[]@,DocScript.Language.Instructions.Statements.DSFunction[]@,DocScript.Runtime.ExecutionContext)">
	<summary>(Subordinate Constructor) Creates a New Program Object, from already-constructed Global Variable Declarations and Functions. Used by FromProgramTreeXML().</summary>
</member><member name="M:DocScript.Runtime.Program.#ctor(DocScript.Runtime.Token[],DocScript.Runtime.ExecutionContext)">
	<summary>(Main Constructor) Instanciates a New DocScript Program from Tokens</summary>
	<param name="_ExecutionContext">
 Can be Nothing (null), if you never intend on running the Program. (I.e. just using it to Product a Program Tree etc...)
 The ExeCxt is passed in as a constructor argument, instead of an argument to Run(),
 because you shouldn't really need to specify it every time you want to run the Program,
 and things like the BuiltInFunctions are a parameter of the Program, not a particular Invoccation of it.
 It is, however, a Mutable member of the class, so you can alter these params between Run() calls...
 </param>
</member><member name="M:DocScript.Runtime.Program.FromSource(System.String,DocScript.Runtime.ExecutionContext@)">
	<summary>SideLoading Constructor: Instanciates a New DocScript Program from DocScript Source</summary>
</member><member name="M:DocScript.Runtime.Program.FromTokensXML(System.Xml.Linq.XElement@,DocScript.Runtime.ExecutionContext@)">
	<summary>SideLoading Constructor: Instanciates a New DocScript Program from a series of XML Tokens, as produced by the DocScript.Runtime.Parser.GetTokensXML() Function</summary>
</member><member name="M:DocScript.Runtime.Program.FromProgramTreeXML(System.Xml.Linq.XElement@,DocScript.Runtime.ExecutionContext@)">
	<summary>SideLoading Constructor: Instanciates a New DocScript Program from a serialised Program Tree, as generated by Program.ProgramTreeXML</summary>
</member><member name="M:DocScript.Runtime.Program.Run(System.String[])">
	<summary>
 Executes the DocScript EntryPoint Function Main(), passing in any CLAs, and returning the ExitCode if there is one.
 (Otherwise, DocScript.Runtime.Constants.ProgramExitCode_Default is returned as the ExitCode)
 This datum is wrapped up inside the ExecutionResult
 </summary>
</member><member name="P:DocScript.Runtime.Program.DefaultVbcExe_ForCurrentSystem">
	<summary>Accounts for differences in System Drive letters and WinDir locations, and then looks in %WINDIR%\Microsoft.NET\Framework64\v4.0.30319\vbc.exe</summary>
</member><member name="M:DocScript.Runtime.Program.CompileToEXE(System.IO.DirectoryInfo,System.String,System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
	<summary>Packages up the DocScript Program, and all required Runtime Resources, into a standalone .exe file, which needs only the .NET Framework present on the client.</summary>
</member><member name="M:DocScript.Runtime.Program.ToString">
	<summary>Produces a DS-KVP Human-readable String for the Object</summary>
</member><member name="P:DocScript.Runtime.Program.ProgramTreeXML">
	<summary>Gets the XML form of the DocScript Program, including all Global Variable Declarations, and Functions with their XML Contents.</summary>
</member><member name="P:DocScript.Runtime.Program.ReconstructedSource">
	<summary>Reconstructs a DocScript-Source version of the Program, by recursively serialising each Instruction</summary>
</member><member name="T:DocScript.Runtime.Program">
	<summary>Represents a collection of Functions (imperatively including an EntryPoint Main()) and any Global Variable Declarations, from a source file</summary>
</member><member name="M:DocScript.Language.Variables.VariableUtilities.GetDSVariableType_FromDataTypeString(System.String)">
	<summary>E.g. Takes in "STRING@" and Returns [DSArray(Of DSString)]. The Case of the Input does not matter; it is ToUpper()'d anyway.</summary>
</member><member name="M:DocScript.Language.Variables.VariableUtilities.GetDataTypeString_FromDSVariableType(System.Type)">
	<summary>E.g. Takes in [DSArray(Of DSString)] and Returns "STRING@". The Output comes from the Language-level Constants, so it UPPERCASE.</summary>
</member><member name="P:DocScript.Language.Variables.VariableUtilities.IsNonVoidFunctionReturnType(System.Type)">
	<summary>Determines if _FunctionReturnType is for a valid IDV, which isn't Void etc. (It must be a String, Number, Boolean, or Array(Of *←)). This is done by an assume-false method.</summary>
</member><member name="M:DocScript.Runtime.BuiltInFunction.#ctor(System.String,DocScript.Language.Instructions.Statements.DSFunction.Parameter[],System.Type,DocScript.Runtime.BuiltInFunction.BuiltInFunctionDelegate)">
	<summary>Remember to Initilise the Descrtiption by means of an Inline With Statement {.Description = "..."}</summary>
</member><member name="M:DocScript.Runtime.BuiltInFunction.Run(DocScript.Runtime.SymbolTablesSnapshot,DocScript.Language.Variables.IDataValue[])">
	<summary>Automatically ensures that the correct number of _Arguments have been provided, in accordance with the .ExpectedParameters Property.</summary>
</member><member name="P:DocScript.Runtime.BuiltInFunction.EffectiveSignature">
	<summary>Contains an UPPERCASE Identifier, ParameterTypes Array, and ReturnType Property</summary>
</member><member name="P:DocScript.Runtime.BuiltInFunction.TemplateCall">
	<summary>Returns E.g. Output(_Text)</summary>
</member><member name="M:DocScript.Runtime.BuiltInFunction.ToString">
	<summary>Produces a DS-KVP Human-readable String for the Object</summary>
</member><member name="M:DocScript.Runtime.BuiltInFunction.ToXML">
	<summary>Returns the Value of the current ISymbolTableValue inside a TagName of the Type</summary>
</member><member name="T:DocScript.Runtime.BuiltInFunction">
	<summary>Represents a Function accessible from, but not defined within, a DocScript Program</summary>
</member><member name="F:DocScript.Runtime.ExecutionContext.ID">
	<summary>Should be unique for each type of ExecutionContext (e.g. a GUI one vs a CLI one). Used when comparing several delegates.</summary>
</member><member name="F:DocScript.Runtime.ExecutionContext.RootFolder">
	<summary>Can be set automatically via System.IO.Path.GetDirectoryName(Application.ExecutablePath)</summary>
</member><member name="F:DocScript.Runtime.ExecutionContext.InputDelegate">
	<summary>
 This is a conveinient layer of abstraction for the creater of the ExecutionContext, who'll want to deal in Strings.
 The InputDelegate will be wrapped-up into the Input() Function which actually appears on the SymTbl.
 This is to say: InputDelegate IS DIFFERENT FROM the Input() BuiltInFunction
 </summary>
</member><member name="F:DocScript.Runtime.ExecutionContext.OutputDelegate">
	<summary>
 This is a conveinient layer of abstraction for the creater of the ExecutionContext, who'll want to deal in Strings.
 The OutputDelegate will be wrapped-up into the Output() Function which actually appears on the SymTbl.
 This is to say: OutputDelegate IS DIFFERENT FROM the Outut() BuiltInFunction
 </summary>
</member><member name="F:DocScript.Runtime.ExecutionContext.OutputErrorDelegate">
	<summary>
 By default, this is set to Nothing, and the ExeCxt will use the OutputDelegate as the OutputErrorDelegate.
 For the CLIDefault, this writes to STDERR in Red.
 For the GUIDefault, this shows a MsgBox with the Error Icon.
 </summary>
</member><member name="P:DocScript.Runtime.ExecutionContext.BuiltInFunctions">
	<summary>When retreived, this Property Concatenates the IO BIFs in.</summary>
</member><member name="M:DocScript.Runtime.ExecutionContext.#ctor(System.String,System.IO.DirectoryInfo,System.Func{System.String,System.String},System.Action{System.String},DocScript.Runtime.BuiltInFunction[])">
	<summary>Note that the OutputError() Delegate should be set with an inline With Statement, as it is not taken in as a Constructor Argument</summary>
	<param name="_ID">Example: "DS_BuiltInExeCxt_CLIDefault"</param>
</member><member name="P:DocScript.Runtime.ExecutionContext.InputBIF_(System.Func{System.String,System.String})">
	<summary>Wraps the InputDelegate in a DocScript BIF</summary>
</member><member name="P:DocScript.Runtime.ExecutionContext.OutputBIF_(System.Action{System.String})">
	<summary>Wraps the OutputDelegate in a DocScript BIF</summary>
</member><member name="P:DocScript.Runtime.ExecutionContext.OutputErrorBIF_">
	<summary>Wraps the OutputErrorDelegate in a DocScript BIF if is ISNOT NOTHING. If it IS NOTHING, then the OutputDelegate is used, but with a different Identifier.</summary>
</member><member name="P:DocScript.Runtime.ExecutionContext.CLIDefault">
	<summary>Uses Console.Write()&amp;Console.ReadLine() and Console.WriteLine()</summary>
</member><member name="P:DocScript.Runtime.ExecutionContext.GUIDefault">
	<summary>Uses InputBox(), and MessageBox.Show() with the ServiceNotification flag. This means that even if the DocScript Interpreter process is running on a different session to that of the GUI Console session, a MessageBox will still be shown on the console.</summary>
</member><member name="P:DocScript.Runtime.ExecutionContext.AllStandardBuiltInFunctions">
	<summary>Concatenates together all the Standard BuiltInFunctions into a single Array</summary>
</member><member name="M:DocScript.Runtime.ExecutionContext.ToString">
	<summary>Produces a DS-KVP Human-readable String for the Object</summary>
</member><member name="T:DocScript.Runtime.ExecutionContext">
	<summary>Contains contextual parameters for a DocScript Program</summary>
</member>
</members>
</doc>