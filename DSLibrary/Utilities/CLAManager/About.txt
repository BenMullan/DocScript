DocScript Utilities CLAManager
---------------------------------------
(Manages Command-Line Arguments)

Features:
	- Handles [/Key:Value] and [/Key] Pairs with [Action(Of String)]s
	- Automatically recognises the /? switch and displays a CLA Help Dictionary automatically
	- Supports both Console and Windows Applications

Required Syntax: (Example)
	Program.exe /Key1:Value /Key2:"Value with Spaces" /Key3
	In other words, the KVP must be in one OS-defined (space-delimited) CLA

Example Instanciation:
	Dim _CLAManager As New DocScript.Utilities.CLAManager(
		_CLAs,
		"DocScript Command-Line Interpreter. Interprets DocScript Source Files.",
		{"DSCLI.EXE /Live",
		"DSCLI.EXE /Live /LogToFile:""DSLive.DSLog"" /ProcessDebugEvents /GUI",
		"DSCLI.EXE /Run /SourceString:""Function <Void> Main ();Output(`Hello, World!`);EndFunction""",
		"DSCLI.EXE /Run /SourceFile:""X:\Programming\DocScript\HelloWorld.DS"" /LogToConsole",
		"DSCLI.EXE /GetProgramTree /SourceString:""Function <Void> Main ();Output(`Hello, World!`);EndFunction""",
		"DSCLI.EXE /Run /SourceString:""Function<Void>Main();System_Beep();EndFunction""",
		"DSCLI.EXE /Run /SourceFile:""BIO2017.DS"" /DocScriptCLAs:""GRBBRB"" /LogToFile:BIO.DSLog"},
		AddressOf Console.WriteLine, True,
		New Utilities.CLAManager.CLADatum("Live", "[Action] Enters a DocScript Live Session: a DS> prompt appears and accepts Statement-level Instructions", False, False, Sub(_Value$) ActionWhenReady = WhenReadyAction.EnterDSLiveSession),
		New Utilities.CLAManager.CLADatum("Run", "[Action] Interprets the DocScript Source (specified by either /SourceFile or /SourceString). This process then returns the ExitCode of the DocScript Program.", False, False, Sub(_Value$) ActionWhenReady = WhenReadyAction.Run),
		New Utilities.CLAManager.CLADatum("GetProgramTree", "[Action] Parses and Lexes the DocScript Source (specified by either /SourceFile or /SourceString), and writes the resultant XML Program tree to the Console Output Stream", False, False, Sub(_Value$) ActionWhenReady = WhenReadyAction.GetProgramTree),
		New Utilities.CLAManager.CLADatum("SourceFile", "[Datum] Specifies the Source via a DocScript Source File", False, True, Sub(_Value$) SourceToInterpret = My.Computer.FileSystem.ReadAllText(_Value)),
		New Utilities.CLAManager.CLADatum("SourceString", "[Datum] Specifies the Source via a DocScript Source String. Use ; for NewLine and ` for StringLiteralStartEndChar.", False, True, Sub(_Value$) SourceToInterpret = _Value.Replace(";", vbCrLf).Replace("`"c, """"c)),
		New Utilities.CLAManager.CLADatum("DocScriptCLAs", "[Datum] Specifies Command-Line Arguments for the DocScript Program", False, True, Sub(_Value$) DocScriptCLAs = _Value.Split(" "c)),
		New Utilities.CLAManager.CLADatum("LogToConsole", "[Flag] Writes Events from the DocScript Log to the Console Output Stream during Interpretation", False, False, Sub(_Value$) DocScript.Logging.LogUtilities.CurrentLogEventHandler = DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.CLIDefault),
		New Utilities.CLAManager.CLADatum("LogToFile", "[Flag+Datum] Writes Events from the DocScript Log to the specified Text File during Interpretation", False, True, Sub(_Value$) DocScript.Logging.LogUtilities.CurrentLogEventHandler = DocScript.Logging.LogUtilities.BuiltInLogEventHandlers.TextFile(New IO.FileInfo(_Value))),
		New Utilities.CLAManager.CLADatum("ProcessDebugEvents", "[Flag] Processes and shows Debugging Messages in the Log (if the Log is shown)", False, False, Sub(_Value$) DocScript.Logging.LogUtilities.ProcessDebugEvents = True),
		New Utilities.CLAManager.CLADatum("GUI", "[Flag] Indicates that the GUI ExecutionContext will be used instead of the CLI one", False, False, Sub(_Value$) EntryPoint.ExeCxt_ToUse = DocScript.Runtime.ExecutionContext.GUIDefault),
		New Utilities.CLAManager.CLADatum("PromptBeforeExit", "[Flag] Shows ""Press [Enter] to continue..."" before exiting the DSCLI Process", False, False, Sub(_Value$) EntryPoint.PromptBeforeExit = True)
	)